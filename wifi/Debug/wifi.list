
wifi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f0c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  0800409c  0800409c  0001409c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041b0  080041b0  0002020c  2**0
                  CONTENTS
  4 .ARM          00000008  080041b0  080041b0  000141b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041b8  080041b8  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041b8  080041b8  000141b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041bc  080041bc  000141bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  080041c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000298  2000020c  080043cc  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004a4  080043cc  000204a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000100ef  00000000  00000000  0002027f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026df  00000000  00000000  0003036e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d28  00000000  00000000  00032a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a09  00000000  00000000  00033778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000282d  00000000  00000000  00034181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ece7  00000000  00000000  000369ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ec4f8  00000000  00000000  00045695  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000039bc  00000000  00000000  00131b90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  0013554c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000020c 	.word	0x2000020c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004084 	.word	0x08004084

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000210 	.word	0x20000210
 80001cc:	08004084 	.word	0x08004084

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b590      	push	{r4, r7, lr}
 800057e:	b085      	sub	sp, #20
 8000580:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000582:	f000 fcab 	bl	8000edc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000586:	f000 f82b 	bl	80005e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058a:	f000 f8e9 	bl	8000760 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800058e:	f000 f8b7 	bl	8000700 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000592:	f000 f877 	bl	8000684 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  uint8_t msg[] = "Hello world\r\n";
 8000596:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <main+0x54>)
 8000598:	463c      	mov	r4, r7
 800059a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800059c:	c407      	stmia	r4!, {r0, r1, r2}
 800059e:	8023      	strh	r3, [r4, #0]
	//HAL_UART_Transmit(&huart2, msg, sizeof(msg), 10);

	//lr1110_modem_board_led_set( (1 << RX_LED_Pin), 1 );		//or HAL_GPIO_TogglePin(GPIOC, RX_LED_Pin);
	//HAL_Delay(1000);
	//lr1110_modem_board_led_set( (1 << RX_LED_Pin), 0 );
	HAL_GPIO_TogglePin(GPIOC, RX_LED_Pin);
 80005a0:	2101      	movs	r1, #1
 80005a2:	480c      	ldr	r0, [pc, #48]	; (80005d4 <main+0x58>)
 80005a4:	f001 f88c 	bl	80016c0 <HAL_GPIO_TogglePin>

	HAL_GPIO_TogglePin(GPIOC, TX_LED_Pin);
 80005a8:	2102      	movs	r1, #2
 80005aa:	480a      	ldr	r0, [pc, #40]	; (80005d4 <main+0x58>)
 80005ac:	f001 f888 	bl	80016c0 <HAL_GPIO_TogglePin>
	//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
	HAL_GPIO_TogglePin(Sniffing_LED_GPIO_Port, Sniffing_LED_Pin);
 80005b0:	2120      	movs	r1, #32
 80005b2:	4809      	ldr	r0, [pc, #36]	; (80005d8 <main+0x5c>)
 80005b4:	f001 f884 	bl	80016c0 <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 80005b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005bc:	f000 fd0a 	bl	8000fd4 <HAL_Delay>


	//HAL_DBG_TRACE_MSG("Testing");
	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 10);
 80005c0:	4639      	mov	r1, r7
 80005c2:	230a      	movs	r3, #10
 80005c4:	220e      	movs	r2, #14
 80005c6:	4805      	ldr	r0, [pc, #20]	; (80005dc <main+0x60>)
 80005c8:	f002 f80b 	bl	80025e2 <HAL_UART_Transmit>
	HAL_GPIO_TogglePin(GPIOC, RX_LED_Pin);
 80005cc:	e7e8      	b.n	80005a0 <main+0x24>
 80005ce:	bf00      	nop
 80005d0:	0800409c 	.word	0x0800409c
 80005d4:	48000800 	.word	0x48000800
 80005d8:	48000400 	.word	0x48000400
 80005dc:	2000028c 	.word	0x2000028c

080005e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b096      	sub	sp, #88	; 0x58
 80005e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e6:	f107 0314 	add.w	r3, r7, #20
 80005ea:	2244      	movs	r2, #68	; 0x44
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f003 f8c4 	bl	800377c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f4:	463b      	mov	r3, r7
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]
 8000600:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000602:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000606:	f001 f89b 	bl	8001740 <HAL_PWREx_ControlVoltageScaling>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000610:	f000 f920 	bl	8000854 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000614:	2302      	movs	r3, #2
 8000616:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000618:	f44f 7380 	mov.w	r3, #256	; 0x100
 800061c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800061e:	2310      	movs	r3, #16
 8000620:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000622:	2302      	movs	r3, #2
 8000624:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000626:	2302      	movs	r3, #2
 8000628:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800062a:	2301      	movs	r3, #1
 800062c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800062e:	230a      	movs	r3, #10
 8000630:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000632:	2307      	movs	r3, #7
 8000634:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000636:	2302      	movs	r3, #2
 8000638:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800063a:	2302      	movs	r3, #2
 800063c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063e:	f107 0314 	add.w	r3, r7, #20
 8000642:	4618      	mov	r0, r3
 8000644:	f001 f8d2 	bl	80017ec <HAL_RCC_OscConfig>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800064e:	f000 f901 	bl	8000854 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000652:	230f      	movs	r3, #15
 8000654:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000656:	2303      	movs	r3, #3
 8000658:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800065e:	2300      	movs	r3, #0
 8000660:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000662:	2300      	movs	r3, #0
 8000664:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000666:	463b      	mov	r3, r7
 8000668:	2104      	movs	r1, #4
 800066a:	4618      	mov	r0, r3
 800066c:	f001 fc9a 	bl	8001fa4 <HAL_RCC_ClockConfig>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000676:	f000 f8ed 	bl	8000854 <Error_Handler>
  }
}
 800067a:	bf00      	nop
 800067c:	3758      	adds	r7, #88	; 0x58
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
	...

08000684 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000688:	4b1b      	ldr	r3, [pc, #108]	; (80006f8 <MX_SPI1_Init+0x74>)
 800068a:	4a1c      	ldr	r2, [pc, #112]	; (80006fc <MX_SPI1_Init+0x78>)
 800068c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800068e:	4b1a      	ldr	r3, [pc, #104]	; (80006f8 <MX_SPI1_Init+0x74>)
 8000690:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000694:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000696:	4b18      	ldr	r3, [pc, #96]	; (80006f8 <MX_SPI1_Init+0x74>)
 8000698:	2200      	movs	r2, #0
 800069a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800069c:	4b16      	ldr	r3, [pc, #88]	; (80006f8 <MX_SPI1_Init+0x74>)
 800069e:	f44f 7240 	mov.w	r2, #768	; 0x300
 80006a2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006a4:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <MX_SPI1_Init+0x74>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <MX_SPI1_Init+0x74>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006b0:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <MX_SPI1_Init+0x74>)
 80006b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006b6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <MX_SPI1_Init+0x74>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <MX_SPI1_Init+0x74>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006c4:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <MX_SPI1_Init+0x74>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006ca:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <MX_SPI1_Init+0x74>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80006d0:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <MX_SPI1_Init+0x74>)
 80006d2:	2207      	movs	r2, #7
 80006d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80006d6:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <MX_SPI1_Init+0x74>)
 80006d8:	2200      	movs	r2, #0
 80006da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80006dc:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <MX_SPI1_Init+0x74>)
 80006de:	2208      	movs	r2, #8
 80006e0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006e2:	4805      	ldr	r0, [pc, #20]	; (80006f8 <MX_SPI1_Init+0x74>)
 80006e4:	f001 fe82 	bl	80023ec <HAL_SPI_Init>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80006ee:	f000 f8b1 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000228 	.word	0x20000228
 80006fc:	40013000 	.word	0x40013000

08000700 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000704:	4b14      	ldr	r3, [pc, #80]	; (8000758 <MX_USART2_UART_Init+0x58>)
 8000706:	4a15      	ldr	r2, [pc, #84]	; (800075c <MX_USART2_UART_Init+0x5c>)
 8000708:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800070a:	4b13      	ldr	r3, [pc, #76]	; (8000758 <MX_USART2_UART_Init+0x58>)
 800070c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000710:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000712:	4b11      	ldr	r3, [pc, #68]	; (8000758 <MX_USART2_UART_Init+0x58>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000718:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <MX_USART2_UART_Init+0x58>)
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <MX_USART2_UART_Init+0x58>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <MX_USART2_UART_Init+0x58>)
 8000726:	220c      	movs	r2, #12
 8000728:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072a:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <MX_USART2_UART_Init+0x58>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000730:	4b09      	ldr	r3, [pc, #36]	; (8000758 <MX_USART2_UART_Init+0x58>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000736:	4b08      	ldr	r3, [pc, #32]	; (8000758 <MX_USART2_UART_Init+0x58>)
 8000738:	2200      	movs	r2, #0
 800073a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <MX_USART2_UART_Init+0x58>)
 800073e:	2200      	movs	r2, #0
 8000740:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000742:	4805      	ldr	r0, [pc, #20]	; (8000758 <MX_USART2_UART_Init+0x58>)
 8000744:	f001 feff 	bl	8002546 <HAL_UART_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800074e:	f000 f881 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	2000028c 	.word	0x2000028c
 800075c:	40004400 	.word	0x40004400

08000760 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08a      	sub	sp, #40	; 0x28
 8000764:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000766:	f107 0314 	add.w	r3, r7, #20
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
 8000774:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000776:	4b34      	ldr	r3, [pc, #208]	; (8000848 <MX_GPIO_Init+0xe8>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077a:	4a33      	ldr	r2, [pc, #204]	; (8000848 <MX_GPIO_Init+0xe8>)
 800077c:	f043 0304 	orr.w	r3, r3, #4
 8000780:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000782:	4b31      	ldr	r3, [pc, #196]	; (8000848 <MX_GPIO_Init+0xe8>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000786:	f003 0304 	and.w	r3, r3, #4
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800078e:	4b2e      	ldr	r3, [pc, #184]	; (8000848 <MX_GPIO_Init+0xe8>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000792:	4a2d      	ldr	r2, [pc, #180]	; (8000848 <MX_GPIO_Init+0xe8>)
 8000794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000798:	64d3      	str	r3, [r2, #76]	; 0x4c
 800079a:	4b2b      	ldr	r3, [pc, #172]	; (8000848 <MX_GPIO_Init+0xe8>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a6:	4b28      	ldr	r3, [pc, #160]	; (8000848 <MX_GPIO_Init+0xe8>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007aa:	4a27      	ldr	r2, [pc, #156]	; (8000848 <MX_GPIO_Init+0xe8>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007b2:	4b25      	ldr	r3, [pc, #148]	; (8000848 <MX_GPIO_Init+0xe8>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007be:	4b22      	ldr	r3, [pc, #136]	; (8000848 <MX_GPIO_Init+0xe8>)
 80007c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c2:	4a21      	ldr	r2, [pc, #132]	; (8000848 <MX_GPIO_Init+0xe8>)
 80007c4:	f043 0302 	orr.w	r3, r3, #2
 80007c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ca:	4b1f      	ldr	r3, [pc, #124]	; (8000848 <MX_GPIO_Init+0xe8>)
 80007cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ce:	f003 0302 	and.w	r3, r3, #2
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RX_LED_Pin|TX_LED_Pin, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2103      	movs	r1, #3
 80007da:	481c      	ldr	r0, [pc, #112]	; (800084c <MX_GPIO_Init+0xec>)
 80007dc:	f000 ff58 	bl	8001690 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Sniffing_LED_GPIO_Port, Sniffing_LED_Pin, GPIO_PIN_RESET);
 80007e0:	2200      	movs	r2, #0
 80007e2:	2120      	movs	r1, #32
 80007e4:	481a      	ldr	r0, [pc, #104]	; (8000850 <MX_GPIO_Init+0xf0>)
 80007e6:	f000 ff53 	bl	8001690 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007f0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	4619      	mov	r1, r3
 8000800:	4812      	ldr	r0, [pc, #72]	; (800084c <MX_GPIO_Init+0xec>)
 8000802:	f000 fd9b 	bl	800133c <HAL_GPIO_Init>

  /*Configure GPIO pins : RX_LED_Pin TX_LED_Pin */
  GPIO_InitStruct.Pin = RX_LED_Pin|TX_LED_Pin;
 8000806:	2303      	movs	r3, #3
 8000808:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080a:	2301      	movs	r3, #1
 800080c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000812:	2300      	movs	r3, #0
 8000814:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	4619      	mov	r1, r3
 800081c:	480b      	ldr	r0, [pc, #44]	; (800084c <MX_GPIO_Init+0xec>)
 800081e:	f000 fd8d 	bl	800133c <HAL_GPIO_Init>

  /*Configure GPIO pin : Sniffing_LED_Pin */
  GPIO_InitStruct.Pin = Sniffing_LED_Pin;
 8000822:	2320      	movs	r3, #32
 8000824:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000826:	2301      	movs	r3, #1
 8000828:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082e:	2300      	movs	r3, #0
 8000830:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Sniffing_LED_GPIO_Port, &GPIO_InitStruct);
 8000832:	f107 0314 	add.w	r3, r7, #20
 8000836:	4619      	mov	r1, r3
 8000838:	4805      	ldr	r0, [pc, #20]	; (8000850 <MX_GPIO_Init+0xf0>)
 800083a:	f000 fd7f 	bl	800133c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800083e:	bf00      	nop
 8000840:	3728      	adds	r7, #40	; 0x28
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40021000 	.word	0x40021000
 800084c:	48000800 	.word	0x48000800
 8000850:	48000400 	.word	0x48000400

08000854 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000858:	b672      	cpsid	i
}
 800085a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800085c:	e7fe      	b.n	800085c <Error_Handler+0x8>
	...

08000860 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000866:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <HAL_MspInit+0x44>)
 8000868:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800086a:	4a0e      	ldr	r2, [pc, #56]	; (80008a4 <HAL_MspInit+0x44>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6613      	str	r3, [r2, #96]	; 0x60
 8000872:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <HAL_MspInit+0x44>)
 8000874:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800087e:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <HAL_MspInit+0x44>)
 8000880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000882:	4a08      	ldr	r2, [pc, #32]	; (80008a4 <HAL_MspInit+0x44>)
 8000884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000888:	6593      	str	r3, [r2, #88]	; 0x58
 800088a:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <HAL_MspInit+0x44>)
 800088c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800088e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000892:	603b      	str	r3, [r7, #0]
 8000894:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000896:	bf00      	nop
 8000898:	370c      	adds	r7, #12
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	40021000 	.word	0x40021000

080008a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008ac:	e7fe      	b.n	80008ac <NMI_Handler+0x4>

080008ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008b2:	e7fe      	b.n	80008b2 <HardFault_Handler+0x4>

080008b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b8:	e7fe      	b.n	80008b8 <MemManage_Handler+0x4>

080008ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008be:	e7fe      	b.n	80008be <BusFault_Handler+0x4>

080008c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008c4:	e7fe      	b.n	80008c4 <UsageFault_Handler+0x4>

080008c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ca:	bf00      	nop
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr

080008d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008d8:	bf00      	nop
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr

080008e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008e2:	b480      	push	{r7}
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008e6:	bf00      	nop
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr

080008f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008f4:	f000 fb4e 	bl	8000f94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008f8:	bf00      	nop
 80008fa:	bd80      	pop	{r7, pc}

080008fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b086      	sub	sp, #24
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000904:	4a14      	ldr	r2, [pc, #80]	; (8000958 <_sbrk+0x5c>)
 8000906:	4b15      	ldr	r3, [pc, #84]	; (800095c <_sbrk+0x60>)
 8000908:	1ad3      	subs	r3, r2, r3
 800090a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000910:	4b13      	ldr	r3, [pc, #76]	; (8000960 <_sbrk+0x64>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d102      	bne.n	800091e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000918:	4b11      	ldr	r3, [pc, #68]	; (8000960 <_sbrk+0x64>)
 800091a:	4a12      	ldr	r2, [pc, #72]	; (8000964 <_sbrk+0x68>)
 800091c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800091e:	4b10      	ldr	r3, [pc, #64]	; (8000960 <_sbrk+0x64>)
 8000920:	681a      	ldr	r2, [r3, #0]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	4413      	add	r3, r2
 8000926:	693a      	ldr	r2, [r7, #16]
 8000928:	429a      	cmp	r2, r3
 800092a:	d207      	bcs.n	800093c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800092c:	f002 ff2e 	bl	800378c <__errno>
 8000930:	4603      	mov	r3, r0
 8000932:	220c      	movs	r2, #12
 8000934:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000936:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800093a:	e009      	b.n	8000950 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800093c:	4b08      	ldr	r3, [pc, #32]	; (8000960 <_sbrk+0x64>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000942:	4b07      	ldr	r3, [pc, #28]	; (8000960 <_sbrk+0x64>)
 8000944:	681a      	ldr	r2, [r3, #0]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4413      	add	r3, r2
 800094a:	4a05      	ldr	r2, [pc, #20]	; (8000960 <_sbrk+0x64>)
 800094c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800094e:	68fb      	ldr	r3, [r7, #12]
}
 8000950:	4618      	mov	r0, r3
 8000952:	3718      	adds	r7, #24
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20018000 	.word	0x20018000
 800095c:	00000400 	.word	0x00000400
 8000960:	20000314 	.word	0x20000314
 8000964:	200004a8 	.word	0x200004a8

08000968 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <SystemInit+0x20>)
 800096e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000972:	4a05      	ldr	r2, [pc, #20]	; (8000988 <SystemInit+0x20>)
 8000974:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000978:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	e000ed00 	.word	0xe000ed00

0800098c <HAL_GPIO_EXTI_Callback>:
/**
* @brief MCU interrupt handlers
*/

void HAL_GPIO_EXTI_Callback( uint16_t gpio_pin )
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	80fb      	strh	r3, [r7, #6]
    uint8_t callback_index = 0;
 8000996:	2300      	movs	r3, #0
 8000998:	73fb      	strb	r3, [r7, #15]

    if( gpio_pin > 0 )
 800099a:	88fb      	ldrh	r3, [r7, #6]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d009      	beq.n	80009b4 <HAL_GPIO_EXTI_Callback+0x28>
    {
        while( gpio_pin != 0x01 )
 80009a0:	e005      	b.n	80009ae <HAL_GPIO_EXTI_Callback+0x22>
        {
            gpio_pin = gpio_pin >> 1;
 80009a2:	88fb      	ldrh	r3, [r7, #6]
 80009a4:	085b      	lsrs	r3, r3, #1
 80009a6:	80fb      	strh	r3, [r7, #6]
            callback_index++;
 80009a8:	7bfb      	ldrb	r3, [r7, #15]
 80009aa:	3301      	adds	r3, #1
 80009ac:	73fb      	strb	r3, [r7, #15]
        while( gpio_pin != 0x01 )
 80009ae:	88fb      	ldrh	r3, [r7, #6]
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	d1f6      	bne.n	80009a2 <HAL_GPIO_EXTI_Callback+0x16>
        }
    }

    if( ( gpio_irq[callback_index] != NULL ) &&
 80009b4:	7bfb      	ldrb	r3, [r7, #15]
 80009b6:	4a0e      	ldr	r2, [pc, #56]	; (80009f0 <HAL_GPIO_EXTI_Callback+0x64>)
 80009b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d012      	beq.n	80009e6 <HAL_GPIO_EXTI_Callback+0x5a>
        ( gpio_irq[callback_index]->callback != NULL ) )
 80009c0:	7bfb      	ldrb	r3, [r7, #15]
 80009c2:	4a0b      	ldr	r2, [pc, #44]	; (80009f0 <HAL_GPIO_EXTI_Callback+0x64>)
 80009c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009c8:	689b      	ldr	r3, [r3, #8]
    if( ( gpio_irq[callback_index] != NULL ) &&
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d00b      	beq.n	80009e6 <HAL_GPIO_EXTI_Callback+0x5a>
    {
        gpio_irq[callback_index]->callback( gpio_irq[callback_index]->context );
 80009ce:	7bfb      	ldrb	r3, [r7, #15]
 80009d0:	4a07      	ldr	r2, [pc, #28]	; (80009f0 <HAL_GPIO_EXTI_Callback+0x64>)
 80009d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009d6:	689b      	ldr	r3, [r3, #8]
 80009d8:	7bfa      	ldrb	r2, [r7, #15]
 80009da:	4905      	ldr	r1, [pc, #20]	; (80009f0 <HAL_GPIO_EXTI_Callback+0x64>)
 80009dc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80009e0:	6852      	ldr	r2, [r2, #4]
 80009e2:	4610      	mov	r0, r2
 80009e4:	4798      	blx	r3
    }
}
 80009e6:	bf00      	nop
 80009e8:	3710      	adds	r7, #16
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000318 	.word	0x20000318

080009f4 <EXTI0_IRQHandler>:

/**
* @brief This function handles EXTI line0 interrupt.
*/
void EXTI0_IRQHandler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80009f8:	2001      	movs	r0, #1
 80009fa:	f000 fe7b 	bl	80016f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}

08000a02 <EXTI1_IRQHandler>:

/**
* @brief This function handles EXTI line1 interrupt.
*/
void EXTI1_IRQHandler(void)
{
 8000a02:	b580      	push	{r7, lr}
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000a06:	2002      	movs	r0, #2
 8000a08:	f000 fe74 	bl	80016f4 <HAL_GPIO_EXTI_IRQHandler>

  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <EXTI2_IRQHandler>:

/**
* @brief This function handles EXTI line2 interrupt.
*/
void EXTI2_IRQHandler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000a14:	2004      	movs	r0, #4
 8000a16:	f000 fe6d 	bl	80016f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <EXTI3_IRQHandler>:

/**
* @brief This function handles EXTI line3 interrupt.
*/
void EXTI3_IRQHandler(void)
{
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000a22:	2008      	movs	r0, #8
 8000a24:	f000 fe66 	bl	80016f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000a28:	bf00      	nop
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <EXTI4_IRQHandler>:

/**
* @brief This function handles EXTI line4 interrupt.
*/
void EXTI4_IRQHandler(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000a30:	2010      	movs	r0, #16
 8000a32:	f000 fe5f 	bl	80016f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}

08000a3a <EXTI9_5_IRQHandler>:

/**
* @brief This function handles EXTI line[9:5] interrupts.
*/
void EXTI9_5_IRQHandler(void)
{
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000a3e:	2020      	movs	r0, #32
 8000a40:	f000 fe58 	bl	80016f4 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000a44:	2040      	movs	r0, #64	; 0x40
 8000a46:	f000 fe55 	bl	80016f4 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000a4a:	2080      	movs	r0, #128	; 0x80
 8000a4c:	f000 fe52 	bl	80016f4 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000a50:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000a54:	f000 fe4e 	bl	80016f4 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000a58:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a5c:	f000 fe4a 	bl	80016f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000a60:	bf00      	nop
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <EXTI15_10_IRQHandler>:
/**
* @brief This function handles EXTI line[15:10] interrupts.
*/
void EXTI15_10_IRQHandler(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_15_IRQn 0 */

  /* USER CODE END EXTI15_15_IRQn 0 */
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000a68:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000a6c:	f000 fe42 	bl	80016f4 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000a70:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000a74:	f000 fe3e 	bl	80016f4 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8000a78:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000a7c:	f000 fe3a 	bl	80016f4 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000a80:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000a84:	f000 fe36 	bl	80016f4 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8000a88:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000a8c:	f000 fe32 	bl	80016f4 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000a90:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000a94:	f000 fe2e 	bl	80016f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_15_IRQn 1 */

  /* USER CODE END EXTI15_15_IRQn 1 */
}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000aa0:	f3bf 8f4f 	dsb	sy
}
 8000aa4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000aa6:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <__NVIC_SystemReset+0x24>)
 8000aa8:	68db      	ldr	r3, [r3, #12]
 8000aaa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000aae:	4904      	ldr	r1, [pc, #16]	; (8000ac0 <__NVIC_SystemReset+0x24>)
 8000ab0:	4b04      	ldr	r3, [pc, #16]	; (8000ac4 <__NVIC_SystemReset+0x28>)
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ab6:	f3bf 8f4f 	dsb	sy
}
 8000aba:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000abc:	bf00      	nop
 8000abe:	e7fd      	b.n	8000abc <__NVIC_SystemReset+0x20>
 8000ac0:	e000ed00 	.word	0xe000ed00
 8000ac4:	05fa0004 	.word	0x05fa0004

08000ac8 <hal_mcu_critical_section_begin>:
 * -----------------------------------------------------------------------------
 * --- PUBLIC FUNCTIONS DEFINITION ---------------------------------------------
 */

void hal_mcu_critical_section_begin( uint32_t* mask )
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000ad0:	f3ef 8310 	mrs	r3, PRIMASK
 8000ad4:	60fb      	str	r3, [r7, #12]
  return(result);
 8000ad6:	68fa      	ldr	r2, [r7, #12]
    *mask = __get_PRIMASK( );
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000adc:	b672      	cpsid	i
}
 8000ade:	bf00      	nop
    __disable_irq( );
}
 8000ae0:	bf00      	nop
 8000ae2:	3714      	adds	r7, #20
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <hal_mcu_reset>:
void hal_mcu_disable_irq( void ) { __disable_irq( ); }

void hal_mcu_enable_irq( void ) { __enable_irq( ); }

void hal_mcu_reset( void )
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000af0:	b672      	cpsid	i
}
 8000af2:	bf00      	nop
    __disable_irq( );

    /* Restart system */
    NVIC_SystemReset( );
 8000af4:	f7ff ffd2 	bl	8000a9c <__NVIC_SystemReset>

08000af8 <hal_mcu_panic>:
}

void hal_mcu_panic( void )
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
 8000afe:	1d3b      	adds	r3, r7, #4
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff ffe1 	bl	8000ac8 <hal_mcu_critical_section_begin>

    HAL_DBG_TRACE_ERROR( "%s\n", __func__ );
 8000b06:	480f      	ldr	r0, [pc, #60]	; (8000b44 <hal_mcu_panic+0x4c>)
 8000b08:	f000 f828 	bl	8000b5c <hal_mcu_trace_print>
 8000b0c:	480e      	ldr	r0, [pc, #56]	; (8000b48 <hal_mcu_panic+0x50>)
 8000b0e:	f000 f825 	bl	8000b5c <hal_mcu_trace_print>
 8000b12:	490e      	ldr	r1, [pc, #56]	; (8000b4c <hal_mcu_panic+0x54>)
 8000b14:	480e      	ldr	r0, [pc, #56]	; (8000b50 <hal_mcu_panic+0x58>)
 8000b16:	f000 f821 	bl	8000b5c <hal_mcu_trace_print>
 8000b1a:	480e      	ldr	r0, [pc, #56]	; (8000b54 <hal_mcu_panic+0x5c>)
 8000b1c:	f000 f81e 	bl	8000b5c <hal_mcu_trace_print>
    HAL_DBG_TRACE_ERROR( "PANIC" );
 8000b20:	4808      	ldr	r0, [pc, #32]	; (8000b44 <hal_mcu_panic+0x4c>)
 8000b22:	f000 f81b 	bl	8000b5c <hal_mcu_trace_print>
 8000b26:	4808      	ldr	r0, [pc, #32]	; (8000b48 <hal_mcu_panic+0x50>)
 8000b28:	f000 f818 	bl	8000b5c <hal_mcu_trace_print>
 8000b2c:	480a      	ldr	r0, [pc, #40]	; (8000b58 <hal_mcu_panic+0x60>)
 8000b2e:	f000 f815 	bl	8000b5c <hal_mcu_trace_print>
 8000b32:	4808      	ldr	r0, [pc, #32]	; (8000b54 <hal_mcu_panic+0x5c>)
 8000b34:	f000 f812 	bl	8000b5c <hal_mcu_trace_print>

    /* reset the board */
    hal_mcu_reset( );
 8000b38:	f7ff ffd8 	bl	8000aec <hal_mcu_reset>
}
 8000b3c:	bf00      	nop
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	080040ac 	.word	0x080040ac
 8000b48:	080040b4 	.word	0x080040b4
 8000b4c:	0800416c 	.word	0x0800416c
 8000b50:	080040bc 	.word	0x080040bc
 8000b54:	080040c0 	.word	0x080040c0
 8000b58:	080040c8 	.word	0x080040c8

08000b5c <hal_mcu_trace_print>:
//magnus     HAL_IncTick( );
//magnus     HAL_SYSTICK_IRQHandler( );
//magnus }

void hal_mcu_trace_print( const char* fmt, ... )
{
 8000b5c:	b40f      	push	{r0, r1, r2, r3}
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b082      	sub	sp, #8
 8000b62:	af00      	add	r7, sp, #0
#if HAL_DBG_TRACE == HAL_FEATURE_ON
    va_list argp;
    va_start( argp, fmt );
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	607b      	str	r3, [r7, #4]
    vprint( fmt, argp );
 8000b6a:	6879      	ldr	r1, [r7, #4]
 8000b6c:	6938      	ldr	r0, [r7, #16]
 8000b6e:	f000 f807 	bl	8000b80 <vprint>
    va_end( argp );
#endif
}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b7c:	b004      	add	sp, #16
 8000b7e:	4770      	bx	lr

08000b80 <vprint>:
}
#endif

#if( HAL_DBG_TRACE == HAL_FEATURE_ON )
static void vprint( const char* fmt, va_list argp )
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b0c2      	sub	sp, #264	; 0x108
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000b8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000b8e:	6018      	str	r0, [r3, #0]
 8000b90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000b94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000b98:	6019      	str	r1, [r3, #0]
    char string[HAL_PRINT_BUFFER_SIZE];
    if( 0 < vsprintf( string, fmt, argp ) )  // build string
 8000b9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000b9e:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 8000ba2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000ba6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000baa:	f107 0008 	add.w	r0, r7, #8
 8000bae:	6812      	ldr	r2, [r2, #0]
 8000bb0:	6819      	ldr	r1, [r3, #0]
 8000bb2:	f002 fdd9 	bl	8003768 <vsiprintf>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	dd0c      	ble.n	8000bd6 <vprint+0x56>
    {
        hal_uart_tx( 2, ( uint8_t* ) string, strlen( string ) );
 8000bbc:	f107 0308 	add.w	r3, r7, #8
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff fb05 	bl	80001d0 <strlen>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	b29a      	uxth	r2, r3
 8000bca:	f107 0308 	add.w	r3, r7, #8
 8000bce:	4619      	mov	r1, r3
 8000bd0:	2002      	movs	r0, #2
 8000bd2:	f000 f829 	bl	8000c28 <hal_uart_tx>
    }
}
 8000bd6:	bf00      	nop
 8000bd8:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <PVD_PVM_IRQHandler>:

/*!
 * @brief  This function handles PVD interrupt request.
 */
void PVD_PVM_IRQHandler( void )
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
    HAL_DBG_TRACE_ERROR( "PVD_PVM_IRQHandler\n\r" );
 8000be4:	480b      	ldr	r0, [pc, #44]	; (8000c14 <PVD_PVM_IRQHandler+0x34>)
 8000be6:	f7ff ffb9 	bl	8000b5c <hal_mcu_trace_print>
 8000bea:	480b      	ldr	r0, [pc, #44]	; (8000c18 <PVD_PVM_IRQHandler+0x38>)
 8000bec:	f7ff ffb6 	bl	8000b5c <hal_mcu_trace_print>
 8000bf0:	480a      	ldr	r0, [pc, #40]	; (8000c1c <PVD_PVM_IRQHandler+0x3c>)
 8000bf2:	f7ff ffb3 	bl	8000b5c <hal_mcu_trace_print>
 8000bf6:	480a      	ldr	r0, [pc, #40]	; (8000c20 <PVD_PVM_IRQHandler+0x40>)
 8000bf8:	f7ff ffb0 	bl	8000b5c <hal_mcu_trace_print>
    /* Loop inside the handler to prevent the Cortex from using the Flash,
       allowing the flash interface to finish any ongoing transfer. */
    while( __HAL_PWR_GET_FLAG( PWR_FLAG_PVDO ) != RESET )
 8000bfc:	bf00      	nop
 8000bfe:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <PVD_PVM_IRQHandler+0x44>)
 8000c00:	695b      	ldr	r3, [r3, #20]
 8000c02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d1f9      	bne.n	8000bfe <PVD_PVM_IRQHandler+0x1e>
    {
    }
    /* Then reset the board */
    hal_mcu_reset( );
 8000c0a:	f7ff ff6f 	bl	8000aec <hal_mcu_reset>
}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	080040ac 	.word	0x080040ac
 8000c18:	080040b4 	.word	0x080040b4
 8000c1c:	0800410c 	.word	0x0800410c
 8000c20:	080040c0 	.word	0x080040c0
 8000c24:	40007000 	.word	0x40007000

08000c28 <hal_uart_tx>:

    HAL_UART_DeInit( &hal_uart[local_id].handle );
}

void hal_uart_tx( const uint32_t id, uint8_t* buff, uint16_t len )
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b086      	sub	sp, #24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	60f8      	str	r0, [r7, #12]
 8000c30:	60b9      	str	r1, [r7, #8]
 8000c32:	4613      	mov	r3, r2
 8000c34:	80fb      	strh	r3, [r7, #6]
    assert_param( ( id > 0 ) && ( ( id - 1 ) < sizeof( hal_uart ) ) );
    uint32_t local_id = id - 1;
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	3b01      	subs	r3, #1
 8000c3a:	617b      	str	r3, [r7, #20]

    //magnus uint8_t msg[] = "usdsds\r\n";
    //magnus HAL_UART_Transmit(&huart2, msg, sizeof(msg), 10);

    HAL_UART_Transmit( &hal_uart[local_id].handle, ( uint8_t* ) buff, len, 0xffffff );
 8000c3c:	697a      	ldr	r2, [r7, #20]
 8000c3e:	4613      	mov	r3, r2
 8000c40:	00db      	lsls	r3, r3, #3
 8000c42:	4413      	add	r3, r2
 8000c44:	011b      	lsls	r3, r3, #4
 8000c46:	4a06      	ldr	r2, [pc, #24]	; (8000c60 <hal_uart_tx+0x38>)
 8000c48:	4413      	add	r3, r2
 8000c4a:	1d18      	adds	r0, r3, #4
 8000c4c:	88fa      	ldrh	r2, [r7, #6]
 8000c4e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8000c52:	68b9      	ldr	r1, [r7, #8]
 8000c54:	f001 fcc5 	bl	80025e2 <HAL_UART_Transmit>
}
 8000c58:	bf00      	nop
 8000c5a:	3718      	adds	r7, #24
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	20000004 	.word	0x20000004

08000c64 <HAL_UART_MspInit>:

    uart_rx_done = false;
}

void HAL_UART_MspInit( UART_HandleTypeDef* huart )
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b098      	sub	sp, #96	; 0x60
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
    if( huart->Instance == hal_uart[0].interface )
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	4b74      	ldr	r3, [pc, #464]	; (8000e44 <HAL_UART_MspInit+0x1e0>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d145      	bne.n	8000d04 <HAL_UART_MspInit+0xa0>
    {
        GPIO_TypeDef*    gpio_port = ( GPIO_TypeDef* ) ( AHB2PERIPH_BASE + ( ( hal_uart[0].pins.tx & 0xF0 ) << 6 ) );
 8000c78:	4b72      	ldr	r3, [pc, #456]	; (8000e44 <HAL_UART_MspInit+0x1e0>)
 8000c7a:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	; 0x8c
 8000c7e:	b29b      	uxth	r3, r3
 8000c80:	019b      	lsls	r3, r3, #6
 8000c82:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8000c86:	f103 4390 	add.w	r3, r3, #1207959552	; 0x48000000
 8000c8a:	657b      	str	r3, [r7, #84]	; 0x54
        GPIO_InitTypeDef gpio      = {
 8000c8c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	647b      	str	r3, [r7, #68]	; 0x44
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000ca4:	2307      	movs	r3, #7
 8000ca6:	653b      	str	r3, [r7, #80]	; 0x50
            .Mode      = GPIO_MODE_AF_PP,
            .Pull      = GPIO_NOPULL,
            .Speed     = GPIO_SPEED_FREQ_HIGH,
            .Alternate = GPIO_AF7_USART1,
        };
        gpio.Pin = ( 1 << ( hal_uart[0].pins.tx & 0x0F ) ) | ( 1 << ( hal_uart[0].pins.rx & 0x0F ) );
 8000ca8:	4b66      	ldr	r3, [pc, #408]	; (8000e44 <HAL_UART_MspInit+0x1e0>)
 8000caa:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	; 0x8c
 8000cae:	b29b      	uxth	r3, r3
 8000cb0:	f003 030f 	and.w	r3, r3, #15
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	409a      	lsls	r2, r3
 8000cb8:	4b62      	ldr	r3, [pc, #392]	; (8000e44 <HAL_UART_MspInit+0x1e0>)
 8000cba:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	; 0x8e
 8000cbe:	b29b      	uxth	r3, r3
 8000cc0:	f003 030f 	and.w	r3, r3, #15
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	643b      	str	r3, [r7, #64]	; 0x40
        HAL_GPIO_Init( gpio_port, &gpio );
 8000cce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8000cd6:	f000 fb31 	bl	800133c <HAL_GPIO_Init>

        /* NVIC for USART1 */
        HAL_NVIC_SetPriority( USART1_IRQn, 0, 1 );
 8000cda:	2201      	movs	r2, #1
 8000cdc:	2100      	movs	r1, #0
 8000cde:	2025      	movs	r0, #37	; 0x25
 8000ce0:	f000 fa77 	bl	80011d2 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ( USART1_IRQn );
 8000ce4:	2025      	movs	r0, #37	; 0x25
 8000ce6:	f000 fa90 	bl	800120a <HAL_NVIC_EnableIRQ>

        __HAL_RCC_USART1_CLK_ENABLE( );
 8000cea:	4b57      	ldr	r3, [pc, #348]	; (8000e48 <HAL_UART_MspInit+0x1e4>)
 8000cec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cee:	4a56      	ldr	r2, [pc, #344]	; (8000e48 <HAL_UART_MspInit+0x1e4>)
 8000cf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cf4:	6613      	str	r3, [r2, #96]	; 0x60
 8000cf6:	4b54      	ldr	r3, [pc, #336]	; (8000e48 <HAL_UART_MspInit+0x1e4>)
 8000cf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000d00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
    else
    {
        hal_mcu_panic( );
    }
}
 8000d02:	e09b      	b.n	8000e3c <HAL_UART_MspInit+0x1d8>
    else if( huart->Instance == hal_uart[1].interface )
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	4b4e      	ldr	r3, [pc, #312]	; (8000e44 <HAL_UART_MspInit+0x1e0>)
 8000d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	d145      	bne.n	8000d9e <HAL_UART_MspInit+0x13a>
                                ( ( hal_uart[1].pins.tx & 0xF0 ) << 6 ) );
 8000d12:	4b4c      	ldr	r3, [pc, #304]	; (8000e44 <HAL_UART_MspInit+0x1e0>)
 8000d14:	f9b3 311c 	ldrsh.w	r3, [r3, #284]	; 0x11c
 8000d18:	b29b      	uxth	r3, r3
 8000d1a:	019b      	lsls	r3, r3, #6
 8000d1c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
            ( GPIO_TypeDef* ) ( AHB2PERIPH_BASE +
 8000d20:	f103 4390 	add.w	r3, r3, #1207959552	; 0x48000000
        GPIO_TypeDef* gpio_port =
 8000d24:	65bb      	str	r3, [r7, #88]	; 0x58
        GPIO_InitTypeDef gpio = {
 8000d26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	605a      	str	r2, [r3, #4]
 8000d30:	609a      	str	r2, [r3, #8]
 8000d32:	60da      	str	r2, [r3, #12]
 8000d34:	611a      	str	r2, [r3, #16]
 8000d36:	2302      	movs	r3, #2
 8000d38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	637b      	str	r3, [r7, #52]	; 0x34
 8000d3e:	2307      	movs	r3, #7
 8000d40:	63bb      	str	r3, [r7, #56]	; 0x38
        gpio.Pin = ( 1 << ( hal_uart[1].pins.tx & 0x0F ) ) |
 8000d42:	4b40      	ldr	r3, [pc, #256]	; (8000e44 <HAL_UART_MspInit+0x1e0>)
 8000d44:	f9b3 311c 	ldrsh.w	r3, [r3, #284]	; 0x11c
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	f003 030f 	and.w	r3, r3, #15
 8000d4e:	2201      	movs	r2, #1
 8000d50:	409a      	lsls	r2, r3
                   ( 1 << ( hal_uart[1].pins.rx & 0x0F ) ) ;
 8000d52:	4b3c      	ldr	r3, [pc, #240]	; (8000e44 <HAL_UART_MspInit+0x1e0>)
 8000d54:	f9b3 311e 	ldrsh.w	r3, [r3, #286]	; 0x11e
 8000d58:	b29b      	uxth	r3, r3
 8000d5a:	f003 030f 	and.w	r3, r3, #15
 8000d5e:	2101      	movs	r1, #1
 8000d60:	fa01 f303 	lsl.w	r3, r1, r3
        gpio.Pin = ( 1 << ( hal_uart[1].pins.tx & 0x0F ) ) |
 8000d64:	4313      	orrs	r3, r2
 8000d66:	62bb      	str	r3, [r7, #40]	; 0x28
        HAL_GPIO_Init( gpio_port, &gpio );
 8000d68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8000d70:	f000 fae4 	bl	800133c <HAL_GPIO_Init>
        HAL_NVIC_SetPriority(USART2_IRQn, 0, 1);
 8000d74:	2201      	movs	r2, #1
 8000d76:	2100      	movs	r1, #0
 8000d78:	2026      	movs	r0, #38	; 0x26
 8000d7a:	f000 fa2a 	bl	80011d2 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d7e:	2026      	movs	r0, #38	; 0x26
 8000d80:	f000 fa43 	bl	800120a <HAL_NVIC_EnableIRQ>
        __HAL_RCC_USART2_CLK_ENABLE( );
 8000d84:	4b30      	ldr	r3, [pc, #192]	; (8000e48 <HAL_UART_MspInit+0x1e4>)
 8000d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d88:	4a2f      	ldr	r2, [pc, #188]	; (8000e48 <HAL_UART_MspInit+0x1e4>)
 8000d8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d8e:	6593      	str	r3, [r2, #88]	; 0x58
 8000d90:	4b2d      	ldr	r3, [pc, #180]	; (8000e48 <HAL_UART_MspInit+0x1e4>)
 8000d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d98:	627b      	str	r3, [r7, #36]	; 0x24
 8000d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000d9c:	e04e      	b.n	8000e3c <HAL_UART_MspInit+0x1d8>
    else if( huart->Instance == hal_uart[2].interface )
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	4b28      	ldr	r3, [pc, #160]	; (8000e44 <HAL_UART_MspInit+0x1e0>)
 8000da4:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d145      	bne.n	8000e38 <HAL_UART_MspInit+0x1d4>
                                ( ( hal_uart[2].pins.tx & 0xF0 ) << 6 ) );
 8000dac:	4b25      	ldr	r3, [pc, #148]	; (8000e44 <HAL_UART_MspInit+0x1e0>)
 8000dae:	f9b3 31ac 	ldrsh.w	r3, [r3, #428]	; 0x1ac
 8000db2:	b29b      	uxth	r3, r3
 8000db4:	019b      	lsls	r3, r3, #6
 8000db6:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
            ( GPIO_TypeDef* ) ( AHB2PERIPH_BASE +
 8000dba:	f103 4390 	add.w	r3, r3, #1207959552	; 0x48000000
        GPIO_TypeDef* gpio_port =
 8000dbe:	65fb      	str	r3, [r7, #92]	; 0x5c
        GPIO_InitTypeDef gpio = {
 8000dc0:	f107 0310 	add.w	r3, r7, #16
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
 8000dce:	611a      	str	r2, [r3, #16]
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	617b      	str	r3, [r7, #20]
 8000dd4:	2303      	movs	r3, #3
 8000dd6:	61fb      	str	r3, [r7, #28]
 8000dd8:	2307      	movs	r3, #7
 8000dda:	623b      	str	r3, [r7, #32]
        gpio.Pin = ( 1 << ( hal_uart[2].pins.tx & 0x0F ) ) |
 8000ddc:	4b19      	ldr	r3, [pc, #100]	; (8000e44 <HAL_UART_MspInit+0x1e0>)
 8000dde:	f9b3 31ac 	ldrsh.w	r3, [r3, #428]	; 0x1ac
 8000de2:	b29b      	uxth	r3, r3
 8000de4:	f003 030f 	and.w	r3, r3, #15
 8000de8:	2201      	movs	r2, #1
 8000dea:	409a      	lsls	r2, r3
                   ( 1 << ( hal_uart[2].pins.rx & 0x0F ) ) ;
 8000dec:	4b15      	ldr	r3, [pc, #84]	; (8000e44 <HAL_UART_MspInit+0x1e0>)
 8000dee:	f9b3 31ae 	ldrsh.w	r3, [r3, #430]	; 0x1ae
 8000df2:	b29b      	uxth	r3, r3
 8000df4:	f003 030f 	and.w	r3, r3, #15
 8000df8:	2101      	movs	r1, #1
 8000dfa:	fa01 f303 	lsl.w	r3, r1, r3
        gpio.Pin = ( 1 << ( hal_uart[2].pins.tx & 0x0F ) ) |
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	613b      	str	r3, [r7, #16]
        HAL_GPIO_Init( gpio_port, &gpio );
 8000e02:	f107 0310 	add.w	r3, r7, #16
 8000e06:	4619      	mov	r1, r3
 8000e08:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000e0a:	f000 fa97 	bl	800133c <HAL_GPIO_Init>
        HAL_NVIC_SetPriority(USART3_IRQn, 0, 1);
 8000e0e:	2201      	movs	r2, #1
 8000e10:	2100      	movs	r1, #0
 8000e12:	2027      	movs	r0, #39	; 0x27
 8000e14:	f000 f9dd 	bl	80011d2 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000e18:	2027      	movs	r0, #39	; 0x27
 8000e1a:	f000 f9f6 	bl	800120a <HAL_NVIC_EnableIRQ>
        __HAL_RCC_USART3_CLK_ENABLE( );
 8000e1e:	4b0a      	ldr	r3, [pc, #40]	; (8000e48 <HAL_UART_MspInit+0x1e4>)
 8000e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e22:	4a09      	ldr	r2, [pc, #36]	; (8000e48 <HAL_UART_MspInit+0x1e4>)
 8000e24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e28:	6593      	str	r3, [r2, #88]	; 0x58
 8000e2a:	4b07      	ldr	r3, [pc, #28]	; (8000e48 <HAL_UART_MspInit+0x1e4>)
 8000e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
}
 8000e36:	e001      	b.n	8000e3c <HAL_UART_MspInit+0x1d8>
        hal_mcu_panic( );
 8000e38:	f7ff fe5e 	bl	8000af8 <hal_mcu_panic>
}
 8000e3c:	bf00      	nop
 8000e3e:	3760      	adds	r7, #96	; 0x60
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	20000004 	.word	0x20000004
 8000e48:	40021000 	.word	0x40021000

08000e4c <USART1_IRQHandler>:
 */

/**
 * @brief  This function handles USART1 interrupt request.
 */
void USART1_IRQHandler( void ) { HAL_UART_IRQHandler( &hal_uart[0].handle ); }
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	4802      	ldr	r0, [pc, #8]	; (8000e5c <USART1_IRQHandler+0x10>)
 8000e52:	f001 fc51 	bl	80026f8 <HAL_UART_IRQHandler>
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000008 	.word	0x20000008

08000e60 <USART2_IRQHandler>:

/**
  * @brief  This function handles USART2 interrupt request.
  */
void USART2_IRQHandler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&hal_uart[1].handle);
 8000e64:	4802      	ldr	r0, [pc, #8]	; (8000e70 <USART2_IRQHandler+0x10>)
 8000e66:	f001 fc47 	bl	80026f8 <HAL_UART_IRQHandler>
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000098 	.word	0x20000098

08000e74 <USART3_IRQHandler>:

/**
  * @brief  This function handles USART3 interrupt request.
  */
void USART3_IRQHandler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&hal_uart[2].handle);
 8000e78:	4802      	ldr	r0, [pc, #8]	; (8000e84 <USART3_IRQHandler+0x10>)
 8000e7a:	f001 fc3d 	bl	80026f8 <HAL_UART_IRQHandler>
}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20000128 	.word	0x20000128

08000e88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ec0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e8c:	f7ff fd6c 	bl	8000968 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e90:	480c      	ldr	r0, [pc, #48]	; (8000ec4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e92:	490d      	ldr	r1, [pc, #52]	; (8000ec8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e94:	4a0d      	ldr	r2, [pc, #52]	; (8000ecc <LoopForever+0xe>)
  movs r3, #0
 8000e96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e98:	e002      	b.n	8000ea0 <LoopCopyDataInit>

08000e9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e9e:	3304      	adds	r3, #4

08000ea0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ea2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea4:	d3f9      	bcc.n	8000e9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ea6:	4a0a      	ldr	r2, [pc, #40]	; (8000ed0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ea8:	4c0a      	ldr	r4, [pc, #40]	; (8000ed4 <LoopForever+0x16>)
  movs r3, #0
 8000eaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eac:	e001      	b.n	8000eb2 <LoopFillZerobss>

08000eae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb0:	3204      	adds	r2, #4

08000eb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb4:	d3fb      	bcc.n	8000eae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eb6:	f002 fc6f 	bl	8003798 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000eba:	f7ff fb5f 	bl	800057c <main>

08000ebe <LoopForever>:

LoopForever:
    b LoopForever
 8000ebe:	e7fe      	b.n	8000ebe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ec0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ec4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec8:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8000ecc:	080041c0 	.word	0x080041c0
  ldr r2, =_sbss
 8000ed0:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8000ed4:	200004a4 	.word	0x200004a4

08000ed8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ed8:	e7fe      	b.n	8000ed8 <ADC1_2_IRQHandler>
	...

08000edc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee6:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <HAL_Init+0x3c>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a0b      	ldr	r2, [pc, #44]	; (8000f18 <HAL_Init+0x3c>)
 8000eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ef0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef2:	2003      	movs	r0, #3
 8000ef4:	f000 f962 	bl	80011bc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ef8:	2000      	movs	r0, #0
 8000efa:	f000 f80f 	bl	8000f1c <HAL_InitTick>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d002      	beq.n	8000f0a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000f04:	2301      	movs	r3, #1
 8000f06:	71fb      	strb	r3, [r7, #7]
 8000f08:	e001      	b.n	8000f0e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f0a:	f7ff fca9 	bl	8000860 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	40022000 	.word	0x40022000

08000f1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f24:	2300      	movs	r3, #0
 8000f26:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f28:	4b17      	ldr	r3, [pc, #92]	; (8000f88 <HAL_InitTick+0x6c>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d023      	beq.n	8000f78 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f30:	4b16      	ldr	r3, [pc, #88]	; (8000f8c <HAL_InitTick+0x70>)
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	4b14      	ldr	r3, [pc, #80]	; (8000f88 <HAL_InitTick+0x6c>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	4619      	mov	r1, r3
 8000f3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 f96d 	bl	8001226 <HAL_SYSTICK_Config>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d10f      	bne.n	8000f72 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2b0f      	cmp	r3, #15
 8000f56:	d809      	bhi.n	8000f6c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	6879      	ldr	r1, [r7, #4]
 8000f5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f60:	f000 f937 	bl	80011d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f64:	4a0a      	ldr	r2, [pc, #40]	; (8000f90 <HAL_InitTick+0x74>)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6013      	str	r3, [r2, #0]
 8000f6a:	e007      	b.n	8000f7c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	73fb      	strb	r3, [r7, #15]
 8000f70:	e004      	b.n	8000f7c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	73fb      	strb	r3, [r7, #15]
 8000f76:	e001      	b.n	8000f7c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	200001b8 	.word	0x200001b8
 8000f8c:	20000000 	.word	0x20000000
 8000f90:	200001b4 	.word	0x200001b4

08000f94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f98:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <HAL_IncTick+0x20>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <HAL_IncTick+0x24>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	4a04      	ldr	r2, [pc, #16]	; (8000fb8 <HAL_IncTick+0x24>)
 8000fa6:	6013      	str	r3, [r2, #0]
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	200001b8 	.word	0x200001b8
 8000fb8:	20000358 	.word	0x20000358

08000fbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc0:	4b03      	ldr	r3, [pc, #12]	; (8000fd0 <HAL_GetTick+0x14>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	20000358 	.word	0x20000358

08000fd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fdc:	f7ff ffee 	bl	8000fbc <HAL_GetTick>
 8000fe0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000fec:	d005      	beq.n	8000ffa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000fee:	4b0a      	ldr	r3, [pc, #40]	; (8001018 <HAL_Delay+0x44>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ffa:	bf00      	nop
 8000ffc:	f7ff ffde 	bl	8000fbc <HAL_GetTick>
 8001000:	4602      	mov	r2, r0
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	68fa      	ldr	r2, [r7, #12]
 8001008:	429a      	cmp	r2, r3
 800100a:	d8f7      	bhi.n	8000ffc <HAL_Delay+0x28>
  {
  }
}
 800100c:	bf00      	nop
 800100e:	bf00      	nop
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	200001b8 	.word	0x200001b8

0800101c <__NVIC_SetPriorityGrouping>:
{
 800101c:	b480      	push	{r7}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f003 0307 	and.w	r3, r3, #7
 800102a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800102c:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <__NVIC_SetPriorityGrouping+0x44>)
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001032:	68ba      	ldr	r2, [r7, #8]
 8001034:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001038:	4013      	ands	r3, r2
 800103a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001044:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800104c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800104e:	4a04      	ldr	r2, [pc, #16]	; (8001060 <__NVIC_SetPriorityGrouping+0x44>)
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	60d3      	str	r3, [r2, #12]
}
 8001054:	bf00      	nop
 8001056:	3714      	adds	r7, #20
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <__NVIC_GetPriorityGrouping>:
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001068:	4b04      	ldr	r3, [pc, #16]	; (800107c <__NVIC_GetPriorityGrouping+0x18>)
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	0a1b      	lsrs	r3, r3, #8
 800106e:	f003 0307 	and.w	r3, r3, #7
}
 8001072:	4618      	mov	r0, r3
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <__NVIC_EnableIRQ>:
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800108a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108e:	2b00      	cmp	r3, #0
 8001090:	db0b      	blt.n	80010aa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	f003 021f 	and.w	r2, r3, #31
 8001098:	4907      	ldr	r1, [pc, #28]	; (80010b8 <__NVIC_EnableIRQ+0x38>)
 800109a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109e:	095b      	lsrs	r3, r3, #5
 80010a0:	2001      	movs	r0, #1
 80010a2:	fa00 f202 	lsl.w	r2, r0, r2
 80010a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80010aa:	bf00      	nop
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	e000e100 	.word	0xe000e100

080010bc <__NVIC_SetPriority>:
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	6039      	str	r1, [r7, #0]
 80010c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	db0a      	blt.n	80010e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	490c      	ldr	r1, [pc, #48]	; (8001108 <__NVIC_SetPriority+0x4c>)
 80010d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010da:	0112      	lsls	r2, r2, #4
 80010dc:	b2d2      	uxtb	r2, r2
 80010de:	440b      	add	r3, r1
 80010e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80010e4:	e00a      	b.n	80010fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	b2da      	uxtb	r2, r3
 80010ea:	4908      	ldr	r1, [pc, #32]	; (800110c <__NVIC_SetPriority+0x50>)
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	f003 030f 	and.w	r3, r3, #15
 80010f2:	3b04      	subs	r3, #4
 80010f4:	0112      	lsls	r2, r2, #4
 80010f6:	b2d2      	uxtb	r2, r2
 80010f8:	440b      	add	r3, r1
 80010fa:	761a      	strb	r2, [r3, #24]
}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	e000e100 	.word	0xe000e100
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <NVIC_EncodePriority>:
{
 8001110:	b480      	push	{r7}
 8001112:	b089      	sub	sp, #36	; 0x24
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	f003 0307 	and.w	r3, r3, #7
 8001122:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	f1c3 0307 	rsb	r3, r3, #7
 800112a:	2b04      	cmp	r3, #4
 800112c:	bf28      	it	cs
 800112e:	2304      	movcs	r3, #4
 8001130:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	3304      	adds	r3, #4
 8001136:	2b06      	cmp	r3, #6
 8001138:	d902      	bls.n	8001140 <NVIC_EncodePriority+0x30>
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	3b03      	subs	r3, #3
 800113e:	e000      	b.n	8001142 <NVIC_EncodePriority+0x32>
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001144:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	43da      	mvns	r2, r3
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	401a      	ands	r2, r3
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001158:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	fa01 f303 	lsl.w	r3, r1, r3
 8001162:	43d9      	mvns	r1, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001168:	4313      	orrs	r3, r2
}
 800116a:	4618      	mov	r0, r3
 800116c:	3724      	adds	r7, #36	; 0x24
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
	...

08001178 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	3b01      	subs	r3, #1
 8001184:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001188:	d301      	bcc.n	800118e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800118a:	2301      	movs	r3, #1
 800118c:	e00f      	b.n	80011ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800118e:	4a0a      	ldr	r2, [pc, #40]	; (80011b8 <SysTick_Config+0x40>)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3b01      	subs	r3, #1
 8001194:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001196:	210f      	movs	r1, #15
 8001198:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800119c:	f7ff ff8e 	bl	80010bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011a0:	4b05      	ldr	r3, [pc, #20]	; (80011b8 <SysTick_Config+0x40>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011a6:	4b04      	ldr	r3, [pc, #16]	; (80011b8 <SysTick_Config+0x40>)
 80011a8:	2207      	movs	r2, #7
 80011aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	e000e010 	.word	0xe000e010

080011bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f7ff ff29 	bl	800101c <__NVIC_SetPriorityGrouping>
}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b086      	sub	sp, #24
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	4603      	mov	r3, r0
 80011da:	60b9      	str	r1, [r7, #8]
 80011dc:	607a      	str	r2, [r7, #4]
 80011de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011e4:	f7ff ff3e 	bl	8001064 <__NVIC_GetPriorityGrouping>
 80011e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	68b9      	ldr	r1, [r7, #8]
 80011ee:	6978      	ldr	r0, [r7, #20]
 80011f0:	f7ff ff8e 	bl	8001110 <NVIC_EncodePriority>
 80011f4:	4602      	mov	r2, r0
 80011f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011fa:	4611      	mov	r1, r2
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff ff5d 	bl	80010bc <__NVIC_SetPriority>
}
 8001202:	bf00      	nop
 8001204:	3718      	adds	r7, #24
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b082      	sub	sp, #8
 800120e:	af00      	add	r7, sp, #0
 8001210:	4603      	mov	r3, r0
 8001212:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff ff31 	bl	8001080 <__NVIC_EnableIRQ>
}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b082      	sub	sp, #8
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f7ff ffa2 	bl	8001178 <SysTick_Config>
 8001234:	4603      	mov	r3, r0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800123e:	b480      	push	{r7}
 8001240:	b085      	sub	sp, #20
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001246:	2300      	movs	r3, #0
 8001248:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001250:	b2db      	uxtb	r3, r3
 8001252:	2b02      	cmp	r3, #2
 8001254:	d008      	beq.n	8001268 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2204      	movs	r2, #4
 800125a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2200      	movs	r2, #0
 8001260:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	e022      	b.n	80012ae <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f022 020e 	bic.w	r2, r2, #14
 8001276:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f022 0201 	bic.w	r2, r2, #1
 8001286:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128c:	f003 021c 	and.w	r2, r3, #28
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001294:	2101      	movs	r1, #1
 8001296:	fa01 f202 	lsl.w	r2, r1, r2
 800129a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2201      	movs	r2, #1
 80012a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2200      	movs	r2, #0
 80012a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80012ac:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3714      	adds	r7, #20
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr

080012ba <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b084      	sub	sp, #16
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012c2:	2300      	movs	r3, #0
 80012c4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d005      	beq.n	80012de <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2204      	movs	r2, #4
 80012d6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	73fb      	strb	r3, [r7, #15]
 80012dc:	e029      	b.n	8001332 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f022 020e 	bic.w	r2, r2, #14
 80012ec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f022 0201 	bic.w	r2, r2, #1
 80012fc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001302:	f003 021c 	and.w	r2, r3, #28
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130a:	2101      	movs	r1, #1
 800130c:	fa01 f202 	lsl.w	r2, r1, r2
 8001310:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2201      	movs	r2, #1
 8001316:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2200      	movs	r2, #0
 800131e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001326:	2b00      	cmp	r3, #0
 8001328:	d003      	beq.n	8001332 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	4798      	blx	r3
    }
  }
  return status;
 8001332:	7bfb      	ldrb	r3, [r7, #15]
}
 8001334:	4618      	mov	r0, r3
 8001336:	3710      	adds	r7, #16
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800133c:	b480      	push	{r7}
 800133e:	b087      	sub	sp, #28
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001346:	2300      	movs	r3, #0
 8001348:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800134a:	e17f      	b.n	800164c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	2101      	movs	r1, #1
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	fa01 f303 	lsl.w	r3, r1, r3
 8001358:	4013      	ands	r3, r2
 800135a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	2b00      	cmp	r3, #0
 8001360:	f000 8171 	beq.w	8001646 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f003 0303 	and.w	r3, r3, #3
 800136c:	2b01      	cmp	r3, #1
 800136e:	d005      	beq.n	800137c <HAL_GPIO_Init+0x40>
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f003 0303 	and.w	r3, r3, #3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d130      	bne.n	80013de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	2203      	movs	r2, #3
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	43db      	mvns	r3, r3
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	4013      	ands	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	68da      	ldr	r2, [r3, #12]
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	693a      	ldr	r2, [r7, #16]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	693a      	ldr	r2, [r7, #16]
 80013aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013b2:	2201      	movs	r2, #1
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	43db      	mvns	r3, r3
 80013bc:	693a      	ldr	r2, [r7, #16]
 80013be:	4013      	ands	r3, r2
 80013c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	091b      	lsrs	r3, r3, #4
 80013c8:	f003 0201 	and.w	r2, r3, #1
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f003 0303 	and.w	r3, r3, #3
 80013e6:	2b03      	cmp	r3, #3
 80013e8:	d118      	bne.n	800141c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80013f0:	2201      	movs	r2, #1
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	43db      	mvns	r3, r3
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	4013      	ands	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	08db      	lsrs	r3, r3, #3
 8001406:	f003 0201 	and.w	r2, r3, #1
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	4313      	orrs	r3, r2
 8001414:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f003 0303 	and.w	r3, r3, #3
 8001424:	2b03      	cmp	r3, #3
 8001426:	d017      	beq.n	8001458 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	2203      	movs	r2, #3
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	43db      	mvns	r3, r3
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	4013      	ands	r3, r2
 800143e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	689a      	ldr	r2, [r3, #8]
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	693a      	ldr	r2, [r7, #16]
 800144e:	4313      	orrs	r3, r2
 8001450:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f003 0303 	and.w	r3, r3, #3
 8001460:	2b02      	cmp	r3, #2
 8001462:	d123      	bne.n	80014ac <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	08da      	lsrs	r2, r3, #3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3208      	adds	r2, #8
 800146c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001470:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	f003 0307 	and.w	r3, r3, #7
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	220f      	movs	r2, #15
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	43db      	mvns	r3, r3
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	4013      	ands	r3, r2
 8001486:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	691a      	ldr	r2, [r3, #16]
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	f003 0307 	and.w	r3, r3, #7
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	4313      	orrs	r3, r2
 800149c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	08da      	lsrs	r2, r3, #3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	3208      	adds	r2, #8
 80014a6:	6939      	ldr	r1, [r7, #16]
 80014a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	2203      	movs	r2, #3
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	43db      	mvns	r3, r3
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	4013      	ands	r3, r2
 80014c2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f003 0203 	and.w	r2, r3, #3
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f000 80ac 	beq.w	8001646 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ee:	4b5f      	ldr	r3, [pc, #380]	; (800166c <HAL_GPIO_Init+0x330>)
 80014f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014f2:	4a5e      	ldr	r2, [pc, #376]	; (800166c <HAL_GPIO_Init+0x330>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	6613      	str	r3, [r2, #96]	; 0x60
 80014fa:	4b5c      	ldr	r3, [pc, #368]	; (800166c <HAL_GPIO_Init+0x330>)
 80014fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	60bb      	str	r3, [r7, #8]
 8001504:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001506:	4a5a      	ldr	r2, [pc, #360]	; (8001670 <HAL_GPIO_Init+0x334>)
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	089b      	lsrs	r3, r3, #2
 800150c:	3302      	adds	r3, #2
 800150e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001512:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	f003 0303 	and.w	r3, r3, #3
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	220f      	movs	r2, #15
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	43db      	mvns	r3, r3
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	4013      	ands	r3, r2
 8001528:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001530:	d025      	beq.n	800157e <HAL_GPIO_Init+0x242>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a4f      	ldr	r2, [pc, #316]	; (8001674 <HAL_GPIO_Init+0x338>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d01f      	beq.n	800157a <HAL_GPIO_Init+0x23e>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a4e      	ldr	r2, [pc, #312]	; (8001678 <HAL_GPIO_Init+0x33c>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d019      	beq.n	8001576 <HAL_GPIO_Init+0x23a>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a4d      	ldr	r2, [pc, #308]	; (800167c <HAL_GPIO_Init+0x340>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d013      	beq.n	8001572 <HAL_GPIO_Init+0x236>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a4c      	ldr	r2, [pc, #304]	; (8001680 <HAL_GPIO_Init+0x344>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d00d      	beq.n	800156e <HAL_GPIO_Init+0x232>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a4b      	ldr	r2, [pc, #300]	; (8001684 <HAL_GPIO_Init+0x348>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d007      	beq.n	800156a <HAL_GPIO_Init+0x22e>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a4a      	ldr	r2, [pc, #296]	; (8001688 <HAL_GPIO_Init+0x34c>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d101      	bne.n	8001566 <HAL_GPIO_Init+0x22a>
 8001562:	2306      	movs	r3, #6
 8001564:	e00c      	b.n	8001580 <HAL_GPIO_Init+0x244>
 8001566:	2307      	movs	r3, #7
 8001568:	e00a      	b.n	8001580 <HAL_GPIO_Init+0x244>
 800156a:	2305      	movs	r3, #5
 800156c:	e008      	b.n	8001580 <HAL_GPIO_Init+0x244>
 800156e:	2304      	movs	r3, #4
 8001570:	e006      	b.n	8001580 <HAL_GPIO_Init+0x244>
 8001572:	2303      	movs	r3, #3
 8001574:	e004      	b.n	8001580 <HAL_GPIO_Init+0x244>
 8001576:	2302      	movs	r3, #2
 8001578:	e002      	b.n	8001580 <HAL_GPIO_Init+0x244>
 800157a:	2301      	movs	r3, #1
 800157c:	e000      	b.n	8001580 <HAL_GPIO_Init+0x244>
 800157e:	2300      	movs	r3, #0
 8001580:	697a      	ldr	r2, [r7, #20]
 8001582:	f002 0203 	and.w	r2, r2, #3
 8001586:	0092      	lsls	r2, r2, #2
 8001588:	4093      	lsls	r3, r2
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	4313      	orrs	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001590:	4937      	ldr	r1, [pc, #220]	; (8001670 <HAL_GPIO_Init+0x334>)
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	089b      	lsrs	r3, r3, #2
 8001596:	3302      	adds	r3, #2
 8001598:	693a      	ldr	r2, [r7, #16]
 800159a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800159e:	4b3b      	ldr	r3, [pc, #236]	; (800168c <HAL_GPIO_Init+0x350>)
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	43db      	mvns	r3, r3
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	4013      	ands	r3, r2
 80015ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d003      	beq.n	80015c2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	4313      	orrs	r3, r2
 80015c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015c2:	4a32      	ldr	r2, [pc, #200]	; (800168c <HAL_GPIO_Init+0x350>)
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015c8:	4b30      	ldr	r3, [pc, #192]	; (800168c <HAL_GPIO_Init+0x350>)
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	43db      	mvns	r3, r3
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	4013      	ands	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d003      	beq.n	80015ec <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015ec:	4a27      	ldr	r2, [pc, #156]	; (800168c <HAL_GPIO_Init+0x350>)
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80015f2:	4b26      	ldr	r3, [pc, #152]	; (800168c <HAL_GPIO_Init+0x350>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	43db      	mvns	r3, r3
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	4013      	ands	r3, r2
 8001600:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d003      	beq.n	8001616 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	4313      	orrs	r3, r2
 8001614:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001616:	4a1d      	ldr	r2, [pc, #116]	; (800168c <HAL_GPIO_Init+0x350>)
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800161c:	4b1b      	ldr	r3, [pc, #108]	; (800168c <HAL_GPIO_Init+0x350>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	43db      	mvns	r3, r3
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	4013      	ands	r3, r2
 800162a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d003      	beq.n	8001640 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	4313      	orrs	r3, r2
 800163e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001640:	4a12      	ldr	r2, [pc, #72]	; (800168c <HAL_GPIO_Init+0x350>)
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	3301      	adds	r3, #1
 800164a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	fa22 f303 	lsr.w	r3, r2, r3
 8001656:	2b00      	cmp	r3, #0
 8001658:	f47f ae78 	bne.w	800134c <HAL_GPIO_Init+0x10>
  }
}
 800165c:	bf00      	nop
 800165e:	bf00      	nop
 8001660:	371c      	adds	r7, #28
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	40021000 	.word	0x40021000
 8001670:	40010000 	.word	0x40010000
 8001674:	48000400 	.word	0x48000400
 8001678:	48000800 	.word	0x48000800
 800167c:	48000c00 	.word	0x48000c00
 8001680:	48001000 	.word	0x48001000
 8001684:	48001400 	.word	0x48001400
 8001688:	48001800 	.word	0x48001800
 800168c:	40010400 	.word	0x40010400

08001690 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	460b      	mov	r3, r1
 800169a:	807b      	strh	r3, [r7, #2]
 800169c:	4613      	mov	r3, r2
 800169e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016a0:	787b      	ldrb	r3, [r7, #1]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d003      	beq.n	80016ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016a6:	887a      	ldrh	r2, [r7, #2]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016ac:	e002      	b.n	80016b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016ae:	887a      	ldrh	r2, [r7, #2]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016b4:	bf00      	nop
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	460b      	mov	r3, r1
 80016ca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	695b      	ldr	r3, [r3, #20]
 80016d0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016d2:	887a      	ldrh	r2, [r7, #2]
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	4013      	ands	r3, r2
 80016d8:	041a      	lsls	r2, r3, #16
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	43d9      	mvns	r1, r3
 80016de:	887b      	ldrh	r3, [r7, #2]
 80016e0:	400b      	ands	r3, r1
 80016e2:	431a      	orrs	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	619a      	str	r2, [r3, #24]
}
 80016e8:	bf00      	nop
 80016ea:	3714      	adds	r7, #20
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80016fe:	4b08      	ldr	r3, [pc, #32]	; (8001720 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001700:	695a      	ldr	r2, [r3, #20]
 8001702:	88fb      	ldrh	r3, [r7, #6]
 8001704:	4013      	ands	r3, r2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d006      	beq.n	8001718 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800170a:	4a05      	ldr	r2, [pc, #20]	; (8001720 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800170c:	88fb      	ldrh	r3, [r7, #6]
 800170e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001710:	88fb      	ldrh	r3, [r7, #6]
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff f93a 	bl	800098c <HAL_GPIO_EXTI_Callback>
  }
}
 8001718:	bf00      	nop
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	40010400 	.word	0x40010400

08001724 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001728:	4b04      	ldr	r3, [pc, #16]	; (800173c <HAL_PWREx_GetVoltageRange+0x18>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001730:	4618      	mov	r0, r3
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	40007000 	.word	0x40007000

08001740 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800174e:	d130      	bne.n	80017b2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001750:	4b23      	ldr	r3, [pc, #140]	; (80017e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001758:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800175c:	d038      	beq.n	80017d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800175e:	4b20      	ldr	r3, [pc, #128]	; (80017e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001766:	4a1e      	ldr	r2, [pc, #120]	; (80017e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001768:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800176c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800176e:	4b1d      	ldr	r3, [pc, #116]	; (80017e4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2232      	movs	r2, #50	; 0x32
 8001774:	fb02 f303 	mul.w	r3, r2, r3
 8001778:	4a1b      	ldr	r2, [pc, #108]	; (80017e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800177a:	fba2 2303 	umull	r2, r3, r2, r3
 800177e:	0c9b      	lsrs	r3, r3, #18
 8001780:	3301      	adds	r3, #1
 8001782:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001784:	e002      	b.n	800178c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	3b01      	subs	r3, #1
 800178a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800178c:	4b14      	ldr	r3, [pc, #80]	; (80017e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800178e:	695b      	ldr	r3, [r3, #20]
 8001790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001794:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001798:	d102      	bne.n	80017a0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d1f2      	bne.n	8001786 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017a0:	4b0f      	ldr	r3, [pc, #60]	; (80017e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017a2:	695b      	ldr	r3, [r3, #20]
 80017a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017ac:	d110      	bne.n	80017d0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e00f      	b.n	80017d2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80017b2:	4b0b      	ldr	r3, [pc, #44]	; (80017e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017be:	d007      	beq.n	80017d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80017c0:	4b07      	ldr	r3, [pc, #28]	; (80017e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017c8:	4a05      	ldr	r2, [pc, #20]	; (80017e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017ce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3714      	adds	r7, #20
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	40007000 	.word	0x40007000
 80017e4:	20000000 	.word	0x20000000
 80017e8:	431bde83 	.word	0x431bde83

080017ec <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b088      	sub	sp, #32
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d101      	bne.n	80017fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e3ca      	b.n	8001f94 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017fe:	4b97      	ldr	r3, [pc, #604]	; (8001a5c <HAL_RCC_OscConfig+0x270>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f003 030c 	and.w	r3, r3, #12
 8001806:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001808:	4b94      	ldr	r3, [pc, #592]	; (8001a5c <HAL_RCC_OscConfig+0x270>)
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	f003 0303 	and.w	r3, r3, #3
 8001810:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0310 	and.w	r3, r3, #16
 800181a:	2b00      	cmp	r3, #0
 800181c:	f000 80e4 	beq.w	80019e8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d007      	beq.n	8001836 <HAL_RCC_OscConfig+0x4a>
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	2b0c      	cmp	r3, #12
 800182a:	f040 808b 	bne.w	8001944 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	2b01      	cmp	r3, #1
 8001832:	f040 8087 	bne.w	8001944 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001836:	4b89      	ldr	r3, [pc, #548]	; (8001a5c <HAL_RCC_OscConfig+0x270>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d005      	beq.n	800184e <HAL_RCC_OscConfig+0x62>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	699b      	ldr	r3, [r3, #24]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d101      	bne.n	800184e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e3a2      	b.n	8001f94 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6a1a      	ldr	r2, [r3, #32]
 8001852:	4b82      	ldr	r3, [pc, #520]	; (8001a5c <HAL_RCC_OscConfig+0x270>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0308 	and.w	r3, r3, #8
 800185a:	2b00      	cmp	r3, #0
 800185c:	d004      	beq.n	8001868 <HAL_RCC_OscConfig+0x7c>
 800185e:	4b7f      	ldr	r3, [pc, #508]	; (8001a5c <HAL_RCC_OscConfig+0x270>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001866:	e005      	b.n	8001874 <HAL_RCC_OscConfig+0x88>
 8001868:	4b7c      	ldr	r3, [pc, #496]	; (8001a5c <HAL_RCC_OscConfig+0x270>)
 800186a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800186e:	091b      	lsrs	r3, r3, #4
 8001870:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001874:	4293      	cmp	r3, r2
 8001876:	d223      	bcs.n	80018c0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a1b      	ldr	r3, [r3, #32]
 800187c:	4618      	mov	r0, r3
 800187e:	f000 fd55 	bl	800232c <RCC_SetFlashLatencyFromMSIRange>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e383      	b.n	8001f94 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800188c:	4b73      	ldr	r3, [pc, #460]	; (8001a5c <HAL_RCC_OscConfig+0x270>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a72      	ldr	r2, [pc, #456]	; (8001a5c <HAL_RCC_OscConfig+0x270>)
 8001892:	f043 0308 	orr.w	r3, r3, #8
 8001896:	6013      	str	r3, [r2, #0]
 8001898:	4b70      	ldr	r3, [pc, #448]	; (8001a5c <HAL_RCC_OscConfig+0x270>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a1b      	ldr	r3, [r3, #32]
 80018a4:	496d      	ldr	r1, [pc, #436]	; (8001a5c <HAL_RCC_OscConfig+0x270>)
 80018a6:	4313      	orrs	r3, r2
 80018a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018aa:	4b6c      	ldr	r3, [pc, #432]	; (8001a5c <HAL_RCC_OscConfig+0x270>)
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	69db      	ldr	r3, [r3, #28]
 80018b6:	021b      	lsls	r3, r3, #8
 80018b8:	4968      	ldr	r1, [pc, #416]	; (8001a5c <HAL_RCC_OscConfig+0x270>)
 80018ba:	4313      	orrs	r3, r2
 80018bc:	604b      	str	r3, [r1, #4]
 80018be:	e025      	b.n	800190c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018c0:	4b66      	ldr	r3, [pc, #408]	; (8001a5c <HAL_RCC_OscConfig+0x270>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a65      	ldr	r2, [pc, #404]	; (8001a5c <HAL_RCC_OscConfig+0x270>)
 80018c6:	f043 0308 	orr.w	r3, r3, #8
 80018ca:	6013      	str	r3, [r2, #0]
 80018cc:	4b63      	ldr	r3, [pc, #396]	; (8001a5c <HAL_RCC_OscConfig+0x270>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a1b      	ldr	r3, [r3, #32]
 80018d8:	4960      	ldr	r1, [pc, #384]	; (8001a5c <HAL_RCC_OscConfig+0x270>)
 80018da:	4313      	orrs	r3, r2
 80018dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018de:	4b5f      	ldr	r3, [pc, #380]	; (8001a5c <HAL_RCC_OscConfig+0x270>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	69db      	ldr	r3, [r3, #28]
 80018ea:	021b      	lsls	r3, r3, #8
 80018ec:	495b      	ldr	r1, [pc, #364]	; (8001a5c <HAL_RCC_OscConfig+0x270>)
 80018ee:	4313      	orrs	r3, r2
 80018f0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d109      	bne.n	800190c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a1b      	ldr	r3, [r3, #32]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f000 fd15 	bl	800232c <RCC_SetFlashLatencyFromMSIRange>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e343      	b.n	8001f94 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800190c:	f000 fc4a 	bl	80021a4 <HAL_RCC_GetSysClockFreq>
 8001910:	4602      	mov	r2, r0
 8001912:	4b52      	ldr	r3, [pc, #328]	; (8001a5c <HAL_RCC_OscConfig+0x270>)
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	091b      	lsrs	r3, r3, #4
 8001918:	f003 030f 	and.w	r3, r3, #15
 800191c:	4950      	ldr	r1, [pc, #320]	; (8001a60 <HAL_RCC_OscConfig+0x274>)
 800191e:	5ccb      	ldrb	r3, [r1, r3]
 8001920:	f003 031f 	and.w	r3, r3, #31
 8001924:	fa22 f303 	lsr.w	r3, r2, r3
 8001928:	4a4e      	ldr	r2, [pc, #312]	; (8001a64 <HAL_RCC_OscConfig+0x278>)
 800192a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800192c:	4b4e      	ldr	r3, [pc, #312]	; (8001a68 <HAL_RCC_OscConfig+0x27c>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff faf3 	bl	8000f1c <HAL_InitTick>
 8001936:	4603      	mov	r3, r0
 8001938:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800193a:	7bfb      	ldrb	r3, [r7, #15]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d052      	beq.n	80019e6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001940:	7bfb      	ldrb	r3, [r7, #15]
 8001942:	e327      	b.n	8001f94 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d032      	beq.n	80019b2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800194c:	4b43      	ldr	r3, [pc, #268]	; (8001a5c <HAL_RCC_OscConfig+0x270>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a42      	ldr	r2, [pc, #264]	; (8001a5c <HAL_RCC_OscConfig+0x270>)
 8001952:	f043 0301 	orr.w	r3, r3, #1
 8001956:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001958:	f7ff fb30 	bl	8000fbc <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001960:	f7ff fb2c 	bl	8000fbc <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b02      	cmp	r3, #2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e310      	b.n	8001f94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001972:	4b3a      	ldr	r3, [pc, #232]	; (8001a5c <HAL_RCC_OscConfig+0x270>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d0f0      	beq.n	8001960 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800197e:	4b37      	ldr	r3, [pc, #220]	; (8001a5c <HAL_RCC_OscConfig+0x270>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a36      	ldr	r2, [pc, #216]	; (8001a5c <HAL_RCC_OscConfig+0x270>)
 8001984:	f043 0308 	orr.w	r3, r3, #8
 8001988:	6013      	str	r3, [r2, #0]
 800198a:	4b34      	ldr	r3, [pc, #208]	; (8001a5c <HAL_RCC_OscConfig+0x270>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a1b      	ldr	r3, [r3, #32]
 8001996:	4931      	ldr	r1, [pc, #196]	; (8001a5c <HAL_RCC_OscConfig+0x270>)
 8001998:	4313      	orrs	r3, r2
 800199a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800199c:	4b2f      	ldr	r3, [pc, #188]	; (8001a5c <HAL_RCC_OscConfig+0x270>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	69db      	ldr	r3, [r3, #28]
 80019a8:	021b      	lsls	r3, r3, #8
 80019aa:	492c      	ldr	r1, [pc, #176]	; (8001a5c <HAL_RCC_OscConfig+0x270>)
 80019ac:	4313      	orrs	r3, r2
 80019ae:	604b      	str	r3, [r1, #4]
 80019b0:	e01a      	b.n	80019e8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80019b2:	4b2a      	ldr	r3, [pc, #168]	; (8001a5c <HAL_RCC_OscConfig+0x270>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a29      	ldr	r2, [pc, #164]	; (8001a5c <HAL_RCC_OscConfig+0x270>)
 80019b8:	f023 0301 	bic.w	r3, r3, #1
 80019bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019be:	f7ff fafd 	bl	8000fbc <HAL_GetTick>
 80019c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019c4:	e008      	b.n	80019d8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019c6:	f7ff faf9 	bl	8000fbc <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d901      	bls.n	80019d8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e2dd      	b.n	8001f94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019d8:	4b20      	ldr	r3, [pc, #128]	; (8001a5c <HAL_RCC_OscConfig+0x270>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0302 	and.w	r3, r3, #2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d1f0      	bne.n	80019c6 <HAL_RCC_OscConfig+0x1da>
 80019e4:	e000      	b.n	80019e8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019e6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0301 	and.w	r3, r3, #1
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d074      	beq.n	8001ade <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	2b08      	cmp	r3, #8
 80019f8:	d005      	beq.n	8001a06 <HAL_RCC_OscConfig+0x21a>
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	2b0c      	cmp	r3, #12
 80019fe:	d10e      	bne.n	8001a1e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	2b03      	cmp	r3, #3
 8001a04:	d10b      	bne.n	8001a1e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a06:	4b15      	ldr	r3, [pc, #84]	; (8001a5c <HAL_RCC_OscConfig+0x270>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d064      	beq.n	8001adc <HAL_RCC_OscConfig+0x2f0>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d160      	bne.n	8001adc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e2ba      	b.n	8001f94 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a26:	d106      	bne.n	8001a36 <HAL_RCC_OscConfig+0x24a>
 8001a28:	4b0c      	ldr	r3, [pc, #48]	; (8001a5c <HAL_RCC_OscConfig+0x270>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a0b      	ldr	r2, [pc, #44]	; (8001a5c <HAL_RCC_OscConfig+0x270>)
 8001a2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a32:	6013      	str	r3, [r2, #0]
 8001a34:	e026      	b.n	8001a84 <HAL_RCC_OscConfig+0x298>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a3e:	d115      	bne.n	8001a6c <HAL_RCC_OscConfig+0x280>
 8001a40:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <HAL_RCC_OscConfig+0x270>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a05      	ldr	r2, [pc, #20]	; (8001a5c <HAL_RCC_OscConfig+0x270>)
 8001a46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a4a:	6013      	str	r3, [r2, #0]
 8001a4c:	4b03      	ldr	r3, [pc, #12]	; (8001a5c <HAL_RCC_OscConfig+0x270>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a02      	ldr	r2, [pc, #8]	; (8001a5c <HAL_RCC_OscConfig+0x270>)
 8001a52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a56:	6013      	str	r3, [r2, #0]
 8001a58:	e014      	b.n	8001a84 <HAL_RCC_OscConfig+0x298>
 8001a5a:	bf00      	nop
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	08004124 	.word	0x08004124
 8001a64:	20000000 	.word	0x20000000
 8001a68:	200001b4 	.word	0x200001b4
 8001a6c:	4ba0      	ldr	r3, [pc, #640]	; (8001cf0 <HAL_RCC_OscConfig+0x504>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a9f      	ldr	r2, [pc, #636]	; (8001cf0 <HAL_RCC_OscConfig+0x504>)
 8001a72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a76:	6013      	str	r3, [r2, #0]
 8001a78:	4b9d      	ldr	r3, [pc, #628]	; (8001cf0 <HAL_RCC_OscConfig+0x504>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a9c      	ldr	r2, [pc, #624]	; (8001cf0 <HAL_RCC_OscConfig+0x504>)
 8001a7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d013      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a8c:	f7ff fa96 	bl	8000fbc <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a94:	f7ff fa92 	bl	8000fbc <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b64      	cmp	r3, #100	; 0x64
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e276      	b.n	8001f94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001aa6:	4b92      	ldr	r3, [pc, #584]	; (8001cf0 <HAL_RCC_OscConfig+0x504>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d0f0      	beq.n	8001a94 <HAL_RCC_OscConfig+0x2a8>
 8001ab2:	e014      	b.n	8001ade <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab4:	f7ff fa82 	bl	8000fbc <HAL_GetTick>
 8001ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001aba:	e008      	b.n	8001ace <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001abc:	f7ff fa7e 	bl	8000fbc <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b64      	cmp	r3, #100	; 0x64
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e262      	b.n	8001f94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ace:	4b88      	ldr	r3, [pc, #544]	; (8001cf0 <HAL_RCC_OscConfig+0x504>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d1f0      	bne.n	8001abc <HAL_RCC_OscConfig+0x2d0>
 8001ada:	e000      	b.n	8001ade <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001adc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d060      	beq.n	8001bac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	2b04      	cmp	r3, #4
 8001aee:	d005      	beq.n	8001afc <HAL_RCC_OscConfig+0x310>
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	2b0c      	cmp	r3, #12
 8001af4:	d119      	bne.n	8001b2a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d116      	bne.n	8001b2a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001afc:	4b7c      	ldr	r3, [pc, #496]	; (8001cf0 <HAL_RCC_OscConfig+0x504>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d005      	beq.n	8001b14 <HAL_RCC_OscConfig+0x328>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d101      	bne.n	8001b14 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e23f      	b.n	8001f94 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b14:	4b76      	ldr	r3, [pc, #472]	; (8001cf0 <HAL_RCC_OscConfig+0x504>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	691b      	ldr	r3, [r3, #16]
 8001b20:	061b      	lsls	r3, r3, #24
 8001b22:	4973      	ldr	r1, [pc, #460]	; (8001cf0 <HAL_RCC_OscConfig+0x504>)
 8001b24:	4313      	orrs	r3, r2
 8001b26:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b28:	e040      	b.n	8001bac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d023      	beq.n	8001b7a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b32:	4b6f      	ldr	r3, [pc, #444]	; (8001cf0 <HAL_RCC_OscConfig+0x504>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a6e      	ldr	r2, [pc, #440]	; (8001cf0 <HAL_RCC_OscConfig+0x504>)
 8001b38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b3e:	f7ff fa3d 	bl	8000fbc <HAL_GetTick>
 8001b42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b44:	e008      	b.n	8001b58 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b46:	f7ff fa39 	bl	8000fbc <HAL_GetTick>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d901      	bls.n	8001b58 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e21d      	b.n	8001f94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b58:	4b65      	ldr	r3, [pc, #404]	; (8001cf0 <HAL_RCC_OscConfig+0x504>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d0f0      	beq.n	8001b46 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b64:	4b62      	ldr	r3, [pc, #392]	; (8001cf0 <HAL_RCC_OscConfig+0x504>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	691b      	ldr	r3, [r3, #16]
 8001b70:	061b      	lsls	r3, r3, #24
 8001b72:	495f      	ldr	r1, [pc, #380]	; (8001cf0 <HAL_RCC_OscConfig+0x504>)
 8001b74:	4313      	orrs	r3, r2
 8001b76:	604b      	str	r3, [r1, #4]
 8001b78:	e018      	b.n	8001bac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b7a:	4b5d      	ldr	r3, [pc, #372]	; (8001cf0 <HAL_RCC_OscConfig+0x504>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a5c      	ldr	r2, [pc, #368]	; (8001cf0 <HAL_RCC_OscConfig+0x504>)
 8001b80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b86:	f7ff fa19 	bl	8000fbc <HAL_GetTick>
 8001b8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b8c:	e008      	b.n	8001ba0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b8e:	f7ff fa15 	bl	8000fbc <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d901      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e1f9      	b.n	8001f94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ba0:	4b53      	ldr	r3, [pc, #332]	; (8001cf0 <HAL_RCC_OscConfig+0x504>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d1f0      	bne.n	8001b8e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0308 	and.w	r3, r3, #8
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d03c      	beq.n	8001c32 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	695b      	ldr	r3, [r3, #20]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d01c      	beq.n	8001bfa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bc0:	4b4b      	ldr	r3, [pc, #300]	; (8001cf0 <HAL_RCC_OscConfig+0x504>)
 8001bc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bc6:	4a4a      	ldr	r2, [pc, #296]	; (8001cf0 <HAL_RCC_OscConfig+0x504>)
 8001bc8:	f043 0301 	orr.w	r3, r3, #1
 8001bcc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bd0:	f7ff f9f4 	bl	8000fbc <HAL_GetTick>
 8001bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bd6:	e008      	b.n	8001bea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bd8:	f7ff f9f0 	bl	8000fbc <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e1d4      	b.n	8001f94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bea:	4b41      	ldr	r3, [pc, #260]	; (8001cf0 <HAL_RCC_OscConfig+0x504>)
 8001bec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d0ef      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x3ec>
 8001bf8:	e01b      	b.n	8001c32 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bfa:	4b3d      	ldr	r3, [pc, #244]	; (8001cf0 <HAL_RCC_OscConfig+0x504>)
 8001bfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c00:	4a3b      	ldr	r2, [pc, #236]	; (8001cf0 <HAL_RCC_OscConfig+0x504>)
 8001c02:	f023 0301 	bic.w	r3, r3, #1
 8001c06:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c0a:	f7ff f9d7 	bl	8000fbc <HAL_GetTick>
 8001c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c10:	e008      	b.n	8001c24 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c12:	f7ff f9d3 	bl	8000fbc <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d901      	bls.n	8001c24 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e1b7      	b.n	8001f94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c24:	4b32      	ldr	r3, [pc, #200]	; (8001cf0 <HAL_RCC_OscConfig+0x504>)
 8001c26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1ef      	bne.n	8001c12 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0304 	and.w	r3, r3, #4
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f000 80a6 	beq.w	8001d8c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c40:	2300      	movs	r3, #0
 8001c42:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001c44:	4b2a      	ldr	r3, [pc, #168]	; (8001cf0 <HAL_RCC_OscConfig+0x504>)
 8001c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d10d      	bne.n	8001c6c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c50:	4b27      	ldr	r3, [pc, #156]	; (8001cf0 <HAL_RCC_OscConfig+0x504>)
 8001c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c54:	4a26      	ldr	r2, [pc, #152]	; (8001cf0 <HAL_RCC_OscConfig+0x504>)
 8001c56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c5a:	6593      	str	r3, [r2, #88]	; 0x58
 8001c5c:	4b24      	ldr	r3, [pc, #144]	; (8001cf0 <HAL_RCC_OscConfig+0x504>)
 8001c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c64:	60bb      	str	r3, [r7, #8]
 8001c66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c6c:	4b21      	ldr	r3, [pc, #132]	; (8001cf4 <HAL_RCC_OscConfig+0x508>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d118      	bne.n	8001caa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c78:	4b1e      	ldr	r3, [pc, #120]	; (8001cf4 <HAL_RCC_OscConfig+0x508>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a1d      	ldr	r2, [pc, #116]	; (8001cf4 <HAL_RCC_OscConfig+0x508>)
 8001c7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c82:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c84:	f7ff f99a 	bl	8000fbc <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c8c:	f7ff f996 	bl	8000fbc <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e17a      	b.n	8001f94 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c9e:	4b15      	ldr	r3, [pc, #84]	; (8001cf4 <HAL_RCC_OscConfig+0x508>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d0f0      	beq.n	8001c8c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d108      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x4d8>
 8001cb2:	4b0f      	ldr	r3, [pc, #60]	; (8001cf0 <HAL_RCC_OscConfig+0x504>)
 8001cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cb8:	4a0d      	ldr	r2, [pc, #52]	; (8001cf0 <HAL_RCC_OscConfig+0x504>)
 8001cba:	f043 0301 	orr.w	r3, r3, #1
 8001cbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cc2:	e029      	b.n	8001d18 <HAL_RCC_OscConfig+0x52c>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	2b05      	cmp	r3, #5
 8001cca:	d115      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x50c>
 8001ccc:	4b08      	ldr	r3, [pc, #32]	; (8001cf0 <HAL_RCC_OscConfig+0x504>)
 8001cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cd2:	4a07      	ldr	r2, [pc, #28]	; (8001cf0 <HAL_RCC_OscConfig+0x504>)
 8001cd4:	f043 0304 	orr.w	r3, r3, #4
 8001cd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cdc:	4b04      	ldr	r3, [pc, #16]	; (8001cf0 <HAL_RCC_OscConfig+0x504>)
 8001cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ce2:	4a03      	ldr	r2, [pc, #12]	; (8001cf0 <HAL_RCC_OscConfig+0x504>)
 8001ce4:	f043 0301 	orr.w	r3, r3, #1
 8001ce8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cec:	e014      	b.n	8001d18 <HAL_RCC_OscConfig+0x52c>
 8001cee:	bf00      	nop
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	40007000 	.word	0x40007000
 8001cf8:	4b9c      	ldr	r3, [pc, #624]	; (8001f6c <HAL_RCC_OscConfig+0x780>)
 8001cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cfe:	4a9b      	ldr	r2, [pc, #620]	; (8001f6c <HAL_RCC_OscConfig+0x780>)
 8001d00:	f023 0301 	bic.w	r3, r3, #1
 8001d04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d08:	4b98      	ldr	r3, [pc, #608]	; (8001f6c <HAL_RCC_OscConfig+0x780>)
 8001d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d0e:	4a97      	ldr	r2, [pc, #604]	; (8001f6c <HAL_RCC_OscConfig+0x780>)
 8001d10:	f023 0304 	bic.w	r3, r3, #4
 8001d14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d016      	beq.n	8001d4e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d20:	f7ff f94c 	bl	8000fbc <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d26:	e00a      	b.n	8001d3e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d28:	f7ff f948 	bl	8000fbc <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e12a      	b.n	8001f94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d3e:	4b8b      	ldr	r3, [pc, #556]	; (8001f6c <HAL_RCC_OscConfig+0x780>)
 8001d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d44:	f003 0302 	and.w	r3, r3, #2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d0ed      	beq.n	8001d28 <HAL_RCC_OscConfig+0x53c>
 8001d4c:	e015      	b.n	8001d7a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d4e:	f7ff f935 	bl	8000fbc <HAL_GetTick>
 8001d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d54:	e00a      	b.n	8001d6c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d56:	f7ff f931 	bl	8000fbc <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e113      	b.n	8001f94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d6c:	4b7f      	ldr	r3, [pc, #508]	; (8001f6c <HAL_RCC_OscConfig+0x780>)
 8001d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d1ed      	bne.n	8001d56 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d7a:	7ffb      	ldrb	r3, [r7, #31]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d105      	bne.n	8001d8c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d80:	4b7a      	ldr	r3, [pc, #488]	; (8001f6c <HAL_RCC_OscConfig+0x780>)
 8001d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d84:	4a79      	ldr	r2, [pc, #484]	; (8001f6c <HAL_RCC_OscConfig+0x780>)
 8001d86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d8a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	f000 80fe 	beq.w	8001f92 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	f040 80d0 	bne.w	8001f40 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001da0:	4b72      	ldr	r3, [pc, #456]	; (8001f6c <HAL_RCC_OscConfig+0x780>)
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	f003 0203 	and.w	r2, r3, #3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d130      	bne.n	8001e16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d127      	bne.n	8001e16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dd0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d11f      	bne.n	8001e16 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001de0:	2a07      	cmp	r2, #7
 8001de2:	bf14      	ite	ne
 8001de4:	2201      	movne	r2, #1
 8001de6:	2200      	moveq	r2, #0
 8001de8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d113      	bne.n	8001e16 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001df8:	085b      	lsrs	r3, r3, #1
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d109      	bne.n	8001e16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0c:	085b      	lsrs	r3, r3, #1
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d06e      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	2b0c      	cmp	r3, #12
 8001e1a:	d069      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001e1c:	4b53      	ldr	r3, [pc, #332]	; (8001f6c <HAL_RCC_OscConfig+0x780>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d105      	bne.n	8001e34 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001e28:	4b50      	ldr	r3, [pc, #320]	; (8001f6c <HAL_RCC_OscConfig+0x780>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e0ad      	b.n	8001f94 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001e38:	4b4c      	ldr	r3, [pc, #304]	; (8001f6c <HAL_RCC_OscConfig+0x780>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a4b      	ldr	r2, [pc, #300]	; (8001f6c <HAL_RCC_OscConfig+0x780>)
 8001e3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e42:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e44:	f7ff f8ba 	bl	8000fbc <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e4c:	f7ff f8b6 	bl	8000fbc <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e09a      	b.n	8001f94 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e5e:	4b43      	ldr	r3, [pc, #268]	; (8001f6c <HAL_RCC_OscConfig+0x780>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1f0      	bne.n	8001e4c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e6a:	4b40      	ldr	r3, [pc, #256]	; (8001f6c <HAL_RCC_OscConfig+0x780>)
 8001e6c:	68da      	ldr	r2, [r3, #12]
 8001e6e:	4b40      	ldr	r3, [pc, #256]	; (8001f70 <HAL_RCC_OscConfig+0x784>)
 8001e70:	4013      	ands	r3, r2
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e7a:	3a01      	subs	r2, #1
 8001e7c:	0112      	lsls	r2, r2, #4
 8001e7e:	4311      	orrs	r1, r2
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e84:	0212      	lsls	r2, r2, #8
 8001e86:	4311      	orrs	r1, r2
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e8c:	0852      	lsrs	r2, r2, #1
 8001e8e:	3a01      	subs	r2, #1
 8001e90:	0552      	lsls	r2, r2, #21
 8001e92:	4311      	orrs	r1, r2
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e98:	0852      	lsrs	r2, r2, #1
 8001e9a:	3a01      	subs	r2, #1
 8001e9c:	0652      	lsls	r2, r2, #25
 8001e9e:	4311      	orrs	r1, r2
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ea4:	0912      	lsrs	r2, r2, #4
 8001ea6:	0452      	lsls	r2, r2, #17
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	4930      	ldr	r1, [pc, #192]	; (8001f6c <HAL_RCC_OscConfig+0x780>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001eb0:	4b2e      	ldr	r3, [pc, #184]	; (8001f6c <HAL_RCC_OscConfig+0x780>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a2d      	ldr	r2, [pc, #180]	; (8001f6c <HAL_RCC_OscConfig+0x780>)
 8001eb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ebc:	4b2b      	ldr	r3, [pc, #172]	; (8001f6c <HAL_RCC_OscConfig+0x780>)
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	4a2a      	ldr	r2, [pc, #168]	; (8001f6c <HAL_RCC_OscConfig+0x780>)
 8001ec2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ec6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ec8:	f7ff f878 	bl	8000fbc <HAL_GetTick>
 8001ecc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ece:	e008      	b.n	8001ee2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed0:	f7ff f874 	bl	8000fbc <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e058      	b.n	8001f94 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ee2:	4b22      	ldr	r3, [pc, #136]	; (8001f6c <HAL_RCC_OscConfig+0x780>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d0f0      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001eee:	e050      	b.n	8001f92 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e04f      	b.n	8001f94 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ef4:	4b1d      	ldr	r3, [pc, #116]	; (8001f6c <HAL_RCC_OscConfig+0x780>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d148      	bne.n	8001f92 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001f00:	4b1a      	ldr	r3, [pc, #104]	; (8001f6c <HAL_RCC_OscConfig+0x780>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a19      	ldr	r2, [pc, #100]	; (8001f6c <HAL_RCC_OscConfig+0x780>)
 8001f06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f0a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f0c:	4b17      	ldr	r3, [pc, #92]	; (8001f6c <HAL_RCC_OscConfig+0x780>)
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	4a16      	ldr	r2, [pc, #88]	; (8001f6c <HAL_RCC_OscConfig+0x780>)
 8001f12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f16:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f18:	f7ff f850 	bl	8000fbc <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f20:	f7ff f84c 	bl	8000fbc <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e030      	b.n	8001f94 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f32:	4b0e      	ldr	r3, [pc, #56]	; (8001f6c <HAL_RCC_OscConfig+0x780>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d0f0      	beq.n	8001f20 <HAL_RCC_OscConfig+0x734>
 8001f3e:	e028      	b.n	8001f92 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	2b0c      	cmp	r3, #12
 8001f44:	d023      	beq.n	8001f8e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f46:	4b09      	ldr	r3, [pc, #36]	; (8001f6c <HAL_RCC_OscConfig+0x780>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a08      	ldr	r2, [pc, #32]	; (8001f6c <HAL_RCC_OscConfig+0x780>)
 8001f4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f52:	f7ff f833 	bl	8000fbc <HAL_GetTick>
 8001f56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f58:	e00c      	b.n	8001f74 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f5a:	f7ff f82f 	bl	8000fbc <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d905      	bls.n	8001f74 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e013      	b.n	8001f94 <HAL_RCC_OscConfig+0x7a8>
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f74:	4b09      	ldr	r3, [pc, #36]	; (8001f9c <HAL_RCC_OscConfig+0x7b0>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1ec      	bne.n	8001f5a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001f80:	4b06      	ldr	r3, [pc, #24]	; (8001f9c <HAL_RCC_OscConfig+0x7b0>)
 8001f82:	68da      	ldr	r2, [r3, #12]
 8001f84:	4905      	ldr	r1, [pc, #20]	; (8001f9c <HAL_RCC_OscConfig+0x7b0>)
 8001f86:	4b06      	ldr	r3, [pc, #24]	; (8001fa0 <HAL_RCC_OscConfig+0x7b4>)
 8001f88:	4013      	ands	r3, r2
 8001f8a:	60cb      	str	r3, [r1, #12]
 8001f8c:	e001      	b.n	8001f92 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e000      	b.n	8001f94 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001f92:	2300      	movs	r3, #0
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3720      	adds	r7, #32
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	feeefffc 	.word	0xfeeefffc

08001fa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d101      	bne.n	8001fb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e0e7      	b.n	8002188 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fb8:	4b75      	ldr	r3, [pc, #468]	; (8002190 <HAL_RCC_ClockConfig+0x1ec>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0307 	and.w	r3, r3, #7
 8001fc0:	683a      	ldr	r2, [r7, #0]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d910      	bls.n	8001fe8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fc6:	4b72      	ldr	r3, [pc, #456]	; (8002190 <HAL_RCC_ClockConfig+0x1ec>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f023 0207 	bic.w	r2, r3, #7
 8001fce:	4970      	ldr	r1, [pc, #448]	; (8002190 <HAL_RCC_ClockConfig+0x1ec>)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fd6:	4b6e      	ldr	r3, [pc, #440]	; (8002190 <HAL_RCC_ClockConfig+0x1ec>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	683a      	ldr	r2, [r7, #0]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d001      	beq.n	8001fe8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e0cf      	b.n	8002188 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0302 	and.w	r3, r3, #2
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d010      	beq.n	8002016 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689a      	ldr	r2, [r3, #8]
 8001ff8:	4b66      	ldr	r3, [pc, #408]	; (8002194 <HAL_RCC_ClockConfig+0x1f0>)
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002000:	429a      	cmp	r2, r3
 8002002:	d908      	bls.n	8002016 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002004:	4b63      	ldr	r3, [pc, #396]	; (8002194 <HAL_RCC_ClockConfig+0x1f0>)
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	4960      	ldr	r1, [pc, #384]	; (8002194 <HAL_RCC_ClockConfig+0x1f0>)
 8002012:	4313      	orrs	r3, r2
 8002014:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	2b00      	cmp	r3, #0
 8002020:	d04c      	beq.n	80020bc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	2b03      	cmp	r3, #3
 8002028:	d107      	bne.n	800203a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800202a:	4b5a      	ldr	r3, [pc, #360]	; (8002194 <HAL_RCC_ClockConfig+0x1f0>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d121      	bne.n	800207a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e0a6      	b.n	8002188 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	2b02      	cmp	r3, #2
 8002040:	d107      	bne.n	8002052 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002042:	4b54      	ldr	r3, [pc, #336]	; (8002194 <HAL_RCC_ClockConfig+0x1f0>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d115      	bne.n	800207a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e09a      	b.n	8002188 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d107      	bne.n	800206a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800205a:	4b4e      	ldr	r3, [pc, #312]	; (8002194 <HAL_RCC_ClockConfig+0x1f0>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d109      	bne.n	800207a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e08e      	b.n	8002188 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800206a:	4b4a      	ldr	r3, [pc, #296]	; (8002194 <HAL_RCC_ClockConfig+0x1f0>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e086      	b.n	8002188 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800207a:	4b46      	ldr	r3, [pc, #280]	; (8002194 <HAL_RCC_ClockConfig+0x1f0>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f023 0203 	bic.w	r2, r3, #3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	4943      	ldr	r1, [pc, #268]	; (8002194 <HAL_RCC_ClockConfig+0x1f0>)
 8002088:	4313      	orrs	r3, r2
 800208a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800208c:	f7fe ff96 	bl	8000fbc <HAL_GetTick>
 8002090:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002092:	e00a      	b.n	80020aa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002094:	f7fe ff92 	bl	8000fbc <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e06e      	b.n	8002188 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020aa:	4b3a      	ldr	r3, [pc, #232]	; (8002194 <HAL_RCC_ClockConfig+0x1f0>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f003 020c 	and.w	r2, r3, #12
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d1eb      	bne.n	8002094 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d010      	beq.n	80020ea <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	4b31      	ldr	r3, [pc, #196]	; (8002194 <HAL_RCC_ClockConfig+0x1f0>)
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d208      	bcs.n	80020ea <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020d8:	4b2e      	ldr	r3, [pc, #184]	; (8002194 <HAL_RCC_ClockConfig+0x1f0>)
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	492b      	ldr	r1, [pc, #172]	; (8002194 <HAL_RCC_ClockConfig+0x1f0>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020ea:	4b29      	ldr	r3, [pc, #164]	; (8002190 <HAL_RCC_ClockConfig+0x1ec>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0307 	and.w	r3, r3, #7
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d210      	bcs.n	800211a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020f8:	4b25      	ldr	r3, [pc, #148]	; (8002190 <HAL_RCC_ClockConfig+0x1ec>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f023 0207 	bic.w	r2, r3, #7
 8002100:	4923      	ldr	r1, [pc, #140]	; (8002190 <HAL_RCC_ClockConfig+0x1ec>)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	4313      	orrs	r3, r2
 8002106:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002108:	4b21      	ldr	r3, [pc, #132]	; (8002190 <HAL_RCC_ClockConfig+0x1ec>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0307 	and.w	r3, r3, #7
 8002110:	683a      	ldr	r2, [r7, #0]
 8002112:	429a      	cmp	r2, r3
 8002114:	d001      	beq.n	800211a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e036      	b.n	8002188 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0304 	and.w	r3, r3, #4
 8002122:	2b00      	cmp	r3, #0
 8002124:	d008      	beq.n	8002138 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002126:	4b1b      	ldr	r3, [pc, #108]	; (8002194 <HAL_RCC_ClockConfig+0x1f0>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	4918      	ldr	r1, [pc, #96]	; (8002194 <HAL_RCC_ClockConfig+0x1f0>)
 8002134:	4313      	orrs	r3, r2
 8002136:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0308 	and.w	r3, r3, #8
 8002140:	2b00      	cmp	r3, #0
 8002142:	d009      	beq.n	8002158 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002144:	4b13      	ldr	r3, [pc, #76]	; (8002194 <HAL_RCC_ClockConfig+0x1f0>)
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	4910      	ldr	r1, [pc, #64]	; (8002194 <HAL_RCC_ClockConfig+0x1f0>)
 8002154:	4313      	orrs	r3, r2
 8002156:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002158:	f000 f824 	bl	80021a4 <HAL_RCC_GetSysClockFreq>
 800215c:	4602      	mov	r2, r0
 800215e:	4b0d      	ldr	r3, [pc, #52]	; (8002194 <HAL_RCC_ClockConfig+0x1f0>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	091b      	lsrs	r3, r3, #4
 8002164:	f003 030f 	and.w	r3, r3, #15
 8002168:	490b      	ldr	r1, [pc, #44]	; (8002198 <HAL_RCC_ClockConfig+0x1f4>)
 800216a:	5ccb      	ldrb	r3, [r1, r3]
 800216c:	f003 031f 	and.w	r3, r3, #31
 8002170:	fa22 f303 	lsr.w	r3, r2, r3
 8002174:	4a09      	ldr	r2, [pc, #36]	; (800219c <HAL_RCC_ClockConfig+0x1f8>)
 8002176:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002178:	4b09      	ldr	r3, [pc, #36]	; (80021a0 <HAL_RCC_ClockConfig+0x1fc>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4618      	mov	r0, r3
 800217e:	f7fe fecd 	bl	8000f1c <HAL_InitTick>
 8002182:	4603      	mov	r3, r0
 8002184:	72fb      	strb	r3, [r7, #11]

  return status;
 8002186:	7afb      	ldrb	r3, [r7, #11]
}
 8002188:	4618      	mov	r0, r3
 800218a:	3710      	adds	r7, #16
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	40022000 	.word	0x40022000
 8002194:	40021000 	.word	0x40021000
 8002198:	08004124 	.word	0x08004124
 800219c:	20000000 	.word	0x20000000
 80021a0:	200001b4 	.word	0x200001b4

080021a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b089      	sub	sp, #36	; 0x24
 80021a8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80021aa:	2300      	movs	r3, #0
 80021ac:	61fb      	str	r3, [r7, #28]
 80021ae:	2300      	movs	r3, #0
 80021b0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021b2:	4b3e      	ldr	r3, [pc, #248]	; (80022ac <HAL_RCC_GetSysClockFreq+0x108>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f003 030c 	and.w	r3, r3, #12
 80021ba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021bc:	4b3b      	ldr	r3, [pc, #236]	; (80022ac <HAL_RCC_GetSysClockFreq+0x108>)
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	f003 0303 	and.w	r3, r3, #3
 80021c4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d005      	beq.n	80021d8 <HAL_RCC_GetSysClockFreq+0x34>
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	2b0c      	cmp	r3, #12
 80021d0:	d121      	bne.n	8002216 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d11e      	bne.n	8002216 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80021d8:	4b34      	ldr	r3, [pc, #208]	; (80022ac <HAL_RCC_GetSysClockFreq+0x108>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0308 	and.w	r3, r3, #8
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d107      	bne.n	80021f4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80021e4:	4b31      	ldr	r3, [pc, #196]	; (80022ac <HAL_RCC_GetSysClockFreq+0x108>)
 80021e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021ea:	0a1b      	lsrs	r3, r3, #8
 80021ec:	f003 030f 	and.w	r3, r3, #15
 80021f0:	61fb      	str	r3, [r7, #28]
 80021f2:	e005      	b.n	8002200 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80021f4:	4b2d      	ldr	r3, [pc, #180]	; (80022ac <HAL_RCC_GetSysClockFreq+0x108>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	091b      	lsrs	r3, r3, #4
 80021fa:	f003 030f 	and.w	r3, r3, #15
 80021fe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002200:	4a2b      	ldr	r2, [pc, #172]	; (80022b0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002208:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d10d      	bne.n	800222c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002214:	e00a      	b.n	800222c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	2b04      	cmp	r3, #4
 800221a:	d102      	bne.n	8002222 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800221c:	4b25      	ldr	r3, [pc, #148]	; (80022b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800221e:	61bb      	str	r3, [r7, #24]
 8002220:	e004      	b.n	800222c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	2b08      	cmp	r3, #8
 8002226:	d101      	bne.n	800222c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002228:	4b23      	ldr	r3, [pc, #140]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x114>)
 800222a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	2b0c      	cmp	r3, #12
 8002230:	d134      	bne.n	800229c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002232:	4b1e      	ldr	r3, [pc, #120]	; (80022ac <HAL_RCC_GetSysClockFreq+0x108>)
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	f003 0303 	and.w	r3, r3, #3
 800223a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	2b02      	cmp	r3, #2
 8002240:	d003      	beq.n	800224a <HAL_RCC_GetSysClockFreq+0xa6>
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	2b03      	cmp	r3, #3
 8002246:	d003      	beq.n	8002250 <HAL_RCC_GetSysClockFreq+0xac>
 8002248:	e005      	b.n	8002256 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800224a:	4b1a      	ldr	r3, [pc, #104]	; (80022b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800224c:	617b      	str	r3, [r7, #20]
      break;
 800224e:	e005      	b.n	800225c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002250:	4b19      	ldr	r3, [pc, #100]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002252:	617b      	str	r3, [r7, #20]
      break;
 8002254:	e002      	b.n	800225c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	617b      	str	r3, [r7, #20]
      break;
 800225a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800225c:	4b13      	ldr	r3, [pc, #76]	; (80022ac <HAL_RCC_GetSysClockFreq+0x108>)
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	091b      	lsrs	r3, r3, #4
 8002262:	f003 0307 	and.w	r3, r3, #7
 8002266:	3301      	adds	r3, #1
 8002268:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800226a:	4b10      	ldr	r3, [pc, #64]	; (80022ac <HAL_RCC_GetSysClockFreq+0x108>)
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	0a1b      	lsrs	r3, r3, #8
 8002270:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002274:	697a      	ldr	r2, [r7, #20]
 8002276:	fb03 f202 	mul.w	r2, r3, r2
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002280:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002282:	4b0a      	ldr	r3, [pc, #40]	; (80022ac <HAL_RCC_GetSysClockFreq+0x108>)
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	0e5b      	lsrs	r3, r3, #25
 8002288:	f003 0303 	and.w	r3, r3, #3
 800228c:	3301      	adds	r3, #1
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002292:	697a      	ldr	r2, [r7, #20]
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	fbb2 f3f3 	udiv	r3, r2, r3
 800229a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800229c:	69bb      	ldr	r3, [r7, #24]
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3724      	adds	r7, #36	; 0x24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	40021000 	.word	0x40021000
 80022b0:	0800413c 	.word	0x0800413c
 80022b4:	00f42400 	.word	0x00f42400
 80022b8:	007a1200 	.word	0x007a1200

080022bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022c0:	4b03      	ldr	r3, [pc, #12]	; (80022d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80022c2:	681b      	ldr	r3, [r3, #0]
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	20000000 	.word	0x20000000

080022d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80022d8:	f7ff fff0 	bl	80022bc <HAL_RCC_GetHCLKFreq>
 80022dc:	4602      	mov	r2, r0
 80022de:	4b06      	ldr	r3, [pc, #24]	; (80022f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	0a1b      	lsrs	r3, r3, #8
 80022e4:	f003 0307 	and.w	r3, r3, #7
 80022e8:	4904      	ldr	r1, [pc, #16]	; (80022fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80022ea:	5ccb      	ldrb	r3, [r1, r3]
 80022ec:	f003 031f 	and.w	r3, r3, #31
 80022f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40021000 	.word	0x40021000
 80022fc:	08004134 	.word	0x08004134

08002300 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002304:	f7ff ffda 	bl	80022bc <HAL_RCC_GetHCLKFreq>
 8002308:	4602      	mov	r2, r0
 800230a:	4b06      	ldr	r3, [pc, #24]	; (8002324 <HAL_RCC_GetPCLK2Freq+0x24>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	0adb      	lsrs	r3, r3, #11
 8002310:	f003 0307 	and.w	r3, r3, #7
 8002314:	4904      	ldr	r1, [pc, #16]	; (8002328 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002316:	5ccb      	ldrb	r3, [r1, r3]
 8002318:	f003 031f 	and.w	r3, r3, #31
 800231c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002320:	4618      	mov	r0, r3
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40021000 	.word	0x40021000
 8002328:	08004134 	.word	0x08004134

0800232c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002334:	2300      	movs	r3, #0
 8002336:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002338:	4b2a      	ldr	r3, [pc, #168]	; (80023e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800233a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d003      	beq.n	800234c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002344:	f7ff f9ee 	bl	8001724 <HAL_PWREx_GetVoltageRange>
 8002348:	6178      	str	r0, [r7, #20]
 800234a:	e014      	b.n	8002376 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800234c:	4b25      	ldr	r3, [pc, #148]	; (80023e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800234e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002350:	4a24      	ldr	r2, [pc, #144]	; (80023e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002352:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002356:	6593      	str	r3, [r2, #88]	; 0x58
 8002358:	4b22      	ldr	r3, [pc, #136]	; (80023e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800235a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800235c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002360:	60fb      	str	r3, [r7, #12]
 8002362:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002364:	f7ff f9de 	bl	8001724 <HAL_PWREx_GetVoltageRange>
 8002368:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800236a:	4b1e      	ldr	r3, [pc, #120]	; (80023e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800236c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236e:	4a1d      	ldr	r2, [pc, #116]	; (80023e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002370:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002374:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800237c:	d10b      	bne.n	8002396 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2b80      	cmp	r3, #128	; 0x80
 8002382:	d919      	bls.n	80023b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2ba0      	cmp	r3, #160	; 0xa0
 8002388:	d902      	bls.n	8002390 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800238a:	2302      	movs	r3, #2
 800238c:	613b      	str	r3, [r7, #16]
 800238e:	e013      	b.n	80023b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002390:	2301      	movs	r3, #1
 8002392:	613b      	str	r3, [r7, #16]
 8002394:	e010      	b.n	80023b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2b80      	cmp	r3, #128	; 0x80
 800239a:	d902      	bls.n	80023a2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800239c:	2303      	movs	r3, #3
 800239e:	613b      	str	r3, [r7, #16]
 80023a0:	e00a      	b.n	80023b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2b80      	cmp	r3, #128	; 0x80
 80023a6:	d102      	bne.n	80023ae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023a8:	2302      	movs	r3, #2
 80023aa:	613b      	str	r3, [r7, #16]
 80023ac:	e004      	b.n	80023b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2b70      	cmp	r3, #112	; 0x70
 80023b2:	d101      	bne.n	80023b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023b4:	2301      	movs	r3, #1
 80023b6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80023b8:	4b0b      	ldr	r3, [pc, #44]	; (80023e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f023 0207 	bic.w	r2, r3, #7
 80023c0:	4909      	ldr	r1, [pc, #36]	; (80023e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80023c8:	4b07      	ldr	r3, [pc, #28]	; (80023e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0307 	and.w	r3, r3, #7
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d001      	beq.n	80023da <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e000      	b.n	80023dc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3718      	adds	r7, #24
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	40021000 	.word	0x40021000
 80023e8:	40022000 	.word	0x40022000

080023ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e095      	b.n	800252a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002402:	2b00      	cmp	r3, #0
 8002404:	d108      	bne.n	8002418 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800240e:	d009      	beq.n	8002424 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	61da      	str	r2, [r3, #28]
 8002416:	e005      	b.n	8002424 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d106      	bne.n	8002444 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 f877 	bl	8002532 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2202      	movs	r2, #2
 8002448:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800245a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002464:	d902      	bls.n	800246c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002466:	2300      	movs	r3, #0
 8002468:	60fb      	str	r3, [r7, #12]
 800246a:	e002      	b.n	8002472 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800246c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002470:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800247a:	d007      	beq.n	800248c <HAL_SPI_Init+0xa0>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002484:	d002      	beq.n	800248c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800249c:	431a      	orrs	r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	431a      	orrs	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	695b      	ldr	r3, [r3, #20]
 80024ac:	f003 0301 	and.w	r3, r3, #1
 80024b0:	431a      	orrs	r2, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024ba:	431a      	orrs	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	69db      	ldr	r3, [r3, #28]
 80024c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024c4:	431a      	orrs	r2, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a1b      	ldr	r3, [r3, #32]
 80024ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ce:	ea42 0103 	orr.w	r1, r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	430a      	orrs	r2, r1
 80024e0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	0c1b      	lsrs	r3, r3, #16
 80024e8:	f003 0204 	and.w	r2, r3, #4
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f0:	f003 0310 	and.w	r3, r3, #16
 80024f4:	431a      	orrs	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024fa:	f003 0308 	and.w	r3, r3, #8
 80024fe:	431a      	orrs	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002508:	ea42 0103 	orr.w	r1, r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	430a      	orrs	r2, r1
 8002518:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8002532:	b480      	push	{r7}
 8002534:	b083      	sub	sp, #12
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800253a:	bf00      	nop
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr

08002546 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b082      	sub	sp, #8
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d101      	bne.n	8002558 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e040      	b.n	80025da <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800255c:	2b00      	cmp	r3, #0
 800255e:	d106      	bne.n	800256e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f7fe fb7b 	bl	8000c64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2224      	movs	r2, #36	; 0x24
 8002572:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f022 0201 	bic.w	r2, r2, #1
 8002582:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002588:	2b00      	cmp	r3, #0
 800258a:	d002      	beq.n	8002592 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f000 fe75 	bl	800327c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f000 fbba 	bl	8002d0c <UART_SetConfig>
 8002598:	4603      	mov	r3, r0
 800259a:	2b01      	cmp	r3, #1
 800259c:	d101      	bne.n	80025a2 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e01b      	b.n	80025da <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	685a      	ldr	r2, [r3, #4]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025b0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	689a      	ldr	r2, [r3, #8]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025c0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f042 0201 	orr.w	r2, r2, #1
 80025d0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 fef4 	bl	80033c0 <UART_CheckIdleState>
 80025d8:	4603      	mov	r3, r0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b08a      	sub	sp, #40	; 0x28
 80025e6:	af02      	add	r7, sp, #8
 80025e8:	60f8      	str	r0, [r7, #12]
 80025ea:	60b9      	str	r1, [r7, #8]
 80025ec:	603b      	str	r3, [r7, #0]
 80025ee:	4613      	mov	r3, r2
 80025f0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025f6:	2b20      	cmp	r3, #32
 80025f8:	d178      	bne.n	80026ec <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d002      	beq.n	8002606 <HAL_UART_Transmit+0x24>
 8002600:	88fb      	ldrh	r3, [r7, #6]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e071      	b.n	80026ee <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2200      	movs	r2, #0
 800260e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2221      	movs	r2, #33	; 0x21
 8002616:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002618:	f7fe fcd0 	bl	8000fbc <HAL_GetTick>
 800261c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	88fa      	ldrh	r2, [r7, #6]
 8002622:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	88fa      	ldrh	r2, [r7, #6]
 800262a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002636:	d108      	bne.n	800264a <HAL_UART_Transmit+0x68>
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d104      	bne.n	800264a <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002640:	2300      	movs	r3, #0
 8002642:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	61bb      	str	r3, [r7, #24]
 8002648:	e003      	b.n	8002652 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800264e:	2300      	movs	r3, #0
 8002650:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002652:	e030      	b.n	80026b6 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	9300      	str	r3, [sp, #0]
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	2200      	movs	r2, #0
 800265c:	2180      	movs	r1, #128	; 0x80
 800265e:	68f8      	ldr	r0, [r7, #12]
 8002660:	f000 ff56 	bl	8003510 <UART_WaitOnFlagUntilTimeout>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d004      	beq.n	8002674 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2220      	movs	r2, #32
 800266e:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e03c      	b.n	80026ee <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d10b      	bne.n	8002692 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	881a      	ldrh	r2, [r3, #0]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002686:	b292      	uxth	r2, r2
 8002688:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	3302      	adds	r3, #2
 800268e:	61bb      	str	r3, [r7, #24]
 8002690:	e008      	b.n	80026a4 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	781a      	ldrb	r2, [r3, #0]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	b292      	uxth	r2, r2
 800269c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	3301      	adds	r3, #1
 80026a2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	3b01      	subs	r3, #1
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80026bc:	b29b      	uxth	r3, r3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1c8      	bne.n	8002654 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	9300      	str	r3, [sp, #0]
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	2200      	movs	r2, #0
 80026ca:	2140      	movs	r1, #64	; 0x40
 80026cc:	68f8      	ldr	r0, [r7, #12]
 80026ce:	f000 ff1f 	bl	8003510 <UART_WaitOnFlagUntilTimeout>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d004      	beq.n	80026e2 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2220      	movs	r2, #32
 80026dc:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e005      	b.n	80026ee <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2220      	movs	r2, #32
 80026e6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80026e8:	2300      	movs	r3, #0
 80026ea:	e000      	b.n	80026ee <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80026ec:	2302      	movs	r3, #2
  }
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3720      	adds	r7, #32
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
	...

080026f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b0ba      	sub	sp, #232	; 0xe8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	69db      	ldr	r3, [r3, #28]
 8002706:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800271e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002722:	f640 030f 	movw	r3, #2063	; 0x80f
 8002726:	4013      	ands	r3, r2
 8002728:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800272c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002730:	2b00      	cmp	r3, #0
 8002732:	d115      	bne.n	8002760 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002738:	f003 0320 	and.w	r3, r3, #32
 800273c:	2b00      	cmp	r3, #0
 800273e:	d00f      	beq.n	8002760 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002744:	f003 0320 	and.w	r3, r3, #32
 8002748:	2b00      	cmp	r3, #0
 800274a:	d009      	beq.n	8002760 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002750:	2b00      	cmp	r3, #0
 8002752:	f000 82ae 	beq.w	8002cb2 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	4798      	blx	r3
      }
      return;
 800275e:	e2a8      	b.n	8002cb2 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002760:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002764:	2b00      	cmp	r3, #0
 8002766:	f000 8117 	beq.w	8002998 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800276a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	2b00      	cmp	r3, #0
 8002774:	d106      	bne.n	8002784 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002776:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800277a:	4b85      	ldr	r3, [pc, #532]	; (8002990 <HAL_UART_IRQHandler+0x298>)
 800277c:	4013      	ands	r3, r2
 800277e:	2b00      	cmp	r3, #0
 8002780:	f000 810a 	beq.w	8002998 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002784:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002788:	f003 0301 	and.w	r3, r3, #1
 800278c:	2b00      	cmp	r3, #0
 800278e:	d011      	beq.n	80027b4 <HAL_UART_IRQHandler+0xbc>
 8002790:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002798:	2b00      	cmp	r3, #0
 800279a:	d00b      	beq.n	80027b4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2201      	movs	r2, #1
 80027a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027aa:	f043 0201 	orr.w	r2, r3, #1
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80027b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d011      	beq.n	80027e4 <HAL_UART_IRQHandler+0xec>
 80027c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80027c4:	f003 0301 	and.w	r3, r3, #1
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d00b      	beq.n	80027e4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2202      	movs	r2, #2
 80027d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027da:	f043 0204 	orr.w	r2, r3, #4
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80027e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027e8:	f003 0304 	and.w	r3, r3, #4
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d011      	beq.n	8002814 <HAL_UART_IRQHandler+0x11c>
 80027f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80027f4:	f003 0301 	and.w	r3, r3, #1
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d00b      	beq.n	8002814 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2204      	movs	r2, #4
 8002802:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800280a:	f043 0202 	orr.w	r2, r3, #2
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002814:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002818:	f003 0308 	and.w	r3, r3, #8
 800281c:	2b00      	cmp	r3, #0
 800281e:	d017      	beq.n	8002850 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002820:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002824:	f003 0320 	and.w	r3, r3, #32
 8002828:	2b00      	cmp	r3, #0
 800282a:	d105      	bne.n	8002838 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800282c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002830:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002834:	2b00      	cmp	r3, #0
 8002836:	d00b      	beq.n	8002850 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2208      	movs	r2, #8
 800283e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002846:	f043 0208 	orr.w	r2, r3, #8
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002850:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002854:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002858:	2b00      	cmp	r3, #0
 800285a:	d012      	beq.n	8002882 <HAL_UART_IRQHandler+0x18a>
 800285c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002860:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d00c      	beq.n	8002882 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002870:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002878:	f043 0220 	orr.w	r2, r3, #32
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002888:	2b00      	cmp	r3, #0
 800288a:	f000 8214 	beq.w	8002cb6 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800288e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002892:	f003 0320 	and.w	r3, r3, #32
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00d      	beq.n	80028b6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800289a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800289e:	f003 0320 	and.w	r3, r3, #32
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d007      	beq.n	80028b6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d003      	beq.n	80028b6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ca:	2b40      	cmp	r3, #64	; 0x40
 80028cc:	d005      	beq.n	80028da <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80028ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80028d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d04f      	beq.n	800297a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 fe7f 	bl	80035de <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ea:	2b40      	cmp	r3, #64	; 0x40
 80028ec:	d141      	bne.n	8002972 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	3308      	adds	r3, #8
 80028f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80028fc:	e853 3f00 	ldrex	r3, [r3]
 8002900:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002904:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002908:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800290c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	3308      	adds	r3, #8
 8002916:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800291a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800291e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002922:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002926:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800292a:	e841 2300 	strex	r3, r2, [r1]
 800292e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002932:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1d9      	bne.n	80028ee <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800293e:	2b00      	cmp	r3, #0
 8002940:	d013      	beq.n	800296a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002946:	4a13      	ldr	r2, [pc, #76]	; (8002994 <HAL_UART_IRQHandler+0x29c>)
 8002948:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800294e:	4618      	mov	r0, r3
 8002950:	f7fe fcb3 	bl	80012ba <HAL_DMA_Abort_IT>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d017      	beq.n	800298a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800295e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002964:	4610      	mov	r0, r2
 8002966:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002968:	e00f      	b.n	800298a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 f9b8 	bl	8002ce0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002970:	e00b      	b.n	800298a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 f9b4 	bl	8002ce0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002978:	e007      	b.n	800298a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 f9b0 	bl	8002ce0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002988:	e195      	b.n	8002cb6 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800298a:	bf00      	nop
    return;
 800298c:	e193      	b.n	8002cb6 <HAL_UART_IRQHandler+0x5be>
 800298e:	bf00      	nop
 8002990:	04000120 	.word	0x04000120
 8002994:	080036a7 	.word	0x080036a7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800299c:	2b01      	cmp	r3, #1
 800299e:	f040 814e 	bne.w	8002c3e <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80029a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029a6:	f003 0310 	and.w	r3, r3, #16
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f000 8147 	beq.w	8002c3e <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80029b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029b4:	f003 0310 	and.w	r3, r3, #16
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f000 8140 	beq.w	8002c3e <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2210      	movs	r2, #16
 80029c4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d0:	2b40      	cmp	r3, #64	; 0x40
 80029d2:	f040 80b8 	bne.w	8002b46 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80029e2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f000 8167 	beq.w	8002cba <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80029f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80029f6:	429a      	cmp	r2, r3
 80029f8:	f080 815f 	bcs.w	8002cba <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002a02:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0320 	and.w	r3, r3, #32
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	f040 8086 	bne.w	8002b24 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a24:	e853 3f00 	ldrex	r3, [r3]
 8002a28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002a2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002a42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002a46:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002a4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002a52:	e841 2300 	strex	r3, r2, [r1]
 8002a56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002a5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1da      	bne.n	8002a18 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	3308      	adds	r3, #8
 8002a68:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a6c:	e853 3f00 	ldrex	r3, [r3]
 8002a70:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002a72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a74:	f023 0301 	bic.w	r3, r3, #1
 8002a78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	3308      	adds	r3, #8
 8002a82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002a86:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002a8a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a8c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002a8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002a92:	e841 2300 	strex	r3, r2, [r1]
 8002a96:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002a98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1e1      	bne.n	8002a62 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	3308      	adds	r3, #8
 8002aa4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aa6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002aa8:	e853 3f00 	ldrex	r3, [r3]
 8002aac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002aae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ab0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ab4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	3308      	adds	r3, #8
 8002abe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002ac2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002ac4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ac6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002ac8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002aca:	e841 2300 	strex	r3, r2, [r1]
 8002ace:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002ad0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1e3      	bne.n	8002a9e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2220      	movs	r2, #32
 8002ada:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002aec:	e853 3f00 	ldrex	r3, [r3]
 8002af0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002af2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002af4:	f023 0310 	bic.w	r3, r3, #16
 8002af8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	461a      	mov	r2, r3
 8002b02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b06:	65bb      	str	r3, [r7, #88]	; 0x58
 8002b08:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b0a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002b0c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b0e:	e841 2300 	strex	r3, r2, [r1]
 8002b12:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002b14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d1e4      	bne.n	8002ae4 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7fe fb8d 	bl	800123e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2202      	movs	r2, #2
 8002b28:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 f8d8 	bl	8002cf4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002b44:	e0b9      	b.n	8002cba <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	f000 80ab 	beq.w	8002cbe <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8002b68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f000 80a6 	beq.w	8002cbe <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b7a:	e853 3f00 	ldrex	r3, [r3]
 8002b7e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b82:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002b86:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	461a      	mov	r2, r3
 8002b90:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002b94:	647b      	str	r3, [r7, #68]	; 0x44
 8002b96:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b98:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002b9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b9c:	e841 2300 	strex	r3, r2, [r1]
 8002ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002ba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d1e4      	bne.n	8002b72 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	3308      	adds	r3, #8
 8002bae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb2:	e853 3f00 	ldrex	r3, [r3]
 8002bb6:	623b      	str	r3, [r7, #32]
   return(result);
 8002bb8:	6a3b      	ldr	r3, [r7, #32]
 8002bba:	f023 0301 	bic.w	r3, r3, #1
 8002bbe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	3308      	adds	r3, #8
 8002bc8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002bcc:	633a      	str	r2, [r7, #48]	; 0x30
 8002bce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bd0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002bd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bd4:	e841 2300 	strex	r3, r2, [r1]
 8002bd8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d1e3      	bne.n	8002ba8 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2220      	movs	r2, #32
 8002be4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	e853 3f00 	ldrex	r3, [r3]
 8002c00:	60fb      	str	r3, [r7, #12]
   return(result);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f023 0310 	bic.w	r3, r3, #16
 8002c08:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	461a      	mov	r2, r3
 8002c12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c16:	61fb      	str	r3, [r7, #28]
 8002c18:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c1a:	69b9      	ldr	r1, [r7, #24]
 8002c1c:	69fa      	ldr	r2, [r7, #28]
 8002c1e:	e841 2300 	strex	r3, r2, [r1]
 8002c22:	617b      	str	r3, [r7, #20]
   return(result);
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1e4      	bne.n	8002bf4 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2202      	movs	r2, #2
 8002c2e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002c34:	4619      	mov	r1, r3
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 f85c 	bl	8002cf4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c3c:	e03f      	b.n	8002cbe <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002c3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00e      	beq.n	8002c68 <HAL_UART_IRQHandler+0x570>
 8002c4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d008      	beq.n	8002c68 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002c5e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f000 fd60 	bl	8003726 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002c66:	e02d      	b.n	8002cc4 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002c68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d00e      	beq.n	8002c92 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002c74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d008      	beq.n	8002c92 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d01c      	beq.n	8002cc2 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	4798      	blx	r3
    }
    return;
 8002c90:	e017      	b.n	8002cc2 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002c92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d012      	beq.n	8002cc4 <HAL_UART_IRQHandler+0x5cc>
 8002c9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00c      	beq.n	8002cc4 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 fd11 	bl	80036d2 <UART_EndTransmit_IT>
    return;
 8002cb0:	e008      	b.n	8002cc4 <HAL_UART_IRQHandler+0x5cc>
      return;
 8002cb2:	bf00      	nop
 8002cb4:	e006      	b.n	8002cc4 <HAL_UART_IRQHandler+0x5cc>
    return;
 8002cb6:	bf00      	nop
 8002cb8:	e004      	b.n	8002cc4 <HAL_UART_IRQHandler+0x5cc>
      return;
 8002cba:	bf00      	nop
 8002cbc:	e002      	b.n	8002cc4 <HAL_UART_IRQHandler+0x5cc>
      return;
 8002cbe:	bf00      	nop
 8002cc0:	e000      	b.n	8002cc4 <HAL_UART_IRQHandler+0x5cc>
    return;
 8002cc2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8002cc4:	37e8      	adds	r7, #232	; 0xe8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop

08002ccc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d00:	bf00      	nop
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d10:	b08a      	sub	sp, #40	; 0x28
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d16:	2300      	movs	r3, #0
 8002d18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	689a      	ldr	r2, [r3, #8]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	431a      	orrs	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	69db      	ldr	r3, [r3, #28]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	4ba4      	ldr	r3, [pc, #656]	; (8002fcc <UART_SetConfig+0x2c0>)
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	6812      	ldr	r2, [r2, #0]
 8002d42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d44:	430b      	orrs	r3, r1
 8002d46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	68da      	ldr	r2, [r3, #12]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a99      	ldr	r2, [pc, #612]	; (8002fd0 <UART_SetConfig+0x2c4>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d004      	beq.n	8002d78 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6a1b      	ldr	r3, [r3, #32]
 8002d72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d74:	4313      	orrs	r3, r2
 8002d76:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a90      	ldr	r2, [pc, #576]	; (8002fd4 <UART_SetConfig+0x2c8>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d126      	bne.n	8002de4 <UART_SetConfig+0xd8>
 8002d96:	4b90      	ldr	r3, [pc, #576]	; (8002fd8 <UART_SetConfig+0x2cc>)
 8002d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d9c:	f003 0303 	and.w	r3, r3, #3
 8002da0:	2b03      	cmp	r3, #3
 8002da2:	d81b      	bhi.n	8002ddc <UART_SetConfig+0xd0>
 8002da4:	a201      	add	r2, pc, #4	; (adr r2, 8002dac <UART_SetConfig+0xa0>)
 8002da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002daa:	bf00      	nop
 8002dac:	08002dbd 	.word	0x08002dbd
 8002db0:	08002dcd 	.word	0x08002dcd
 8002db4:	08002dc5 	.word	0x08002dc5
 8002db8:	08002dd5 	.word	0x08002dd5
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dc2:	e116      	b.n	8002ff2 <UART_SetConfig+0x2e6>
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dca:	e112      	b.n	8002ff2 <UART_SetConfig+0x2e6>
 8002dcc:	2304      	movs	r3, #4
 8002dce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dd2:	e10e      	b.n	8002ff2 <UART_SetConfig+0x2e6>
 8002dd4:	2308      	movs	r3, #8
 8002dd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dda:	e10a      	b.n	8002ff2 <UART_SetConfig+0x2e6>
 8002ddc:	2310      	movs	r3, #16
 8002dde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002de2:	e106      	b.n	8002ff2 <UART_SetConfig+0x2e6>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a7c      	ldr	r2, [pc, #496]	; (8002fdc <UART_SetConfig+0x2d0>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d138      	bne.n	8002e60 <UART_SetConfig+0x154>
 8002dee:	4b7a      	ldr	r3, [pc, #488]	; (8002fd8 <UART_SetConfig+0x2cc>)
 8002df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df4:	f003 030c 	and.w	r3, r3, #12
 8002df8:	2b0c      	cmp	r3, #12
 8002dfa:	d82d      	bhi.n	8002e58 <UART_SetConfig+0x14c>
 8002dfc:	a201      	add	r2, pc, #4	; (adr r2, 8002e04 <UART_SetConfig+0xf8>)
 8002dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e02:	bf00      	nop
 8002e04:	08002e39 	.word	0x08002e39
 8002e08:	08002e59 	.word	0x08002e59
 8002e0c:	08002e59 	.word	0x08002e59
 8002e10:	08002e59 	.word	0x08002e59
 8002e14:	08002e49 	.word	0x08002e49
 8002e18:	08002e59 	.word	0x08002e59
 8002e1c:	08002e59 	.word	0x08002e59
 8002e20:	08002e59 	.word	0x08002e59
 8002e24:	08002e41 	.word	0x08002e41
 8002e28:	08002e59 	.word	0x08002e59
 8002e2c:	08002e59 	.word	0x08002e59
 8002e30:	08002e59 	.word	0x08002e59
 8002e34:	08002e51 	.word	0x08002e51
 8002e38:	2300      	movs	r3, #0
 8002e3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e3e:	e0d8      	b.n	8002ff2 <UART_SetConfig+0x2e6>
 8002e40:	2302      	movs	r3, #2
 8002e42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e46:	e0d4      	b.n	8002ff2 <UART_SetConfig+0x2e6>
 8002e48:	2304      	movs	r3, #4
 8002e4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e4e:	e0d0      	b.n	8002ff2 <UART_SetConfig+0x2e6>
 8002e50:	2308      	movs	r3, #8
 8002e52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e56:	e0cc      	b.n	8002ff2 <UART_SetConfig+0x2e6>
 8002e58:	2310      	movs	r3, #16
 8002e5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e5e:	e0c8      	b.n	8002ff2 <UART_SetConfig+0x2e6>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a5e      	ldr	r2, [pc, #376]	; (8002fe0 <UART_SetConfig+0x2d4>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d125      	bne.n	8002eb6 <UART_SetConfig+0x1aa>
 8002e6a:	4b5b      	ldr	r3, [pc, #364]	; (8002fd8 <UART_SetConfig+0x2cc>)
 8002e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e70:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002e74:	2b30      	cmp	r3, #48	; 0x30
 8002e76:	d016      	beq.n	8002ea6 <UART_SetConfig+0x19a>
 8002e78:	2b30      	cmp	r3, #48	; 0x30
 8002e7a:	d818      	bhi.n	8002eae <UART_SetConfig+0x1a2>
 8002e7c:	2b20      	cmp	r3, #32
 8002e7e:	d00a      	beq.n	8002e96 <UART_SetConfig+0x18a>
 8002e80:	2b20      	cmp	r3, #32
 8002e82:	d814      	bhi.n	8002eae <UART_SetConfig+0x1a2>
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d002      	beq.n	8002e8e <UART_SetConfig+0x182>
 8002e88:	2b10      	cmp	r3, #16
 8002e8a:	d008      	beq.n	8002e9e <UART_SetConfig+0x192>
 8002e8c:	e00f      	b.n	8002eae <UART_SetConfig+0x1a2>
 8002e8e:	2300      	movs	r3, #0
 8002e90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e94:	e0ad      	b.n	8002ff2 <UART_SetConfig+0x2e6>
 8002e96:	2302      	movs	r3, #2
 8002e98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e9c:	e0a9      	b.n	8002ff2 <UART_SetConfig+0x2e6>
 8002e9e:	2304      	movs	r3, #4
 8002ea0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ea4:	e0a5      	b.n	8002ff2 <UART_SetConfig+0x2e6>
 8002ea6:	2308      	movs	r3, #8
 8002ea8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002eac:	e0a1      	b.n	8002ff2 <UART_SetConfig+0x2e6>
 8002eae:	2310      	movs	r3, #16
 8002eb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002eb4:	e09d      	b.n	8002ff2 <UART_SetConfig+0x2e6>
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a4a      	ldr	r2, [pc, #296]	; (8002fe4 <UART_SetConfig+0x2d8>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d125      	bne.n	8002f0c <UART_SetConfig+0x200>
 8002ec0:	4b45      	ldr	r3, [pc, #276]	; (8002fd8 <UART_SetConfig+0x2cc>)
 8002ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002eca:	2bc0      	cmp	r3, #192	; 0xc0
 8002ecc:	d016      	beq.n	8002efc <UART_SetConfig+0x1f0>
 8002ece:	2bc0      	cmp	r3, #192	; 0xc0
 8002ed0:	d818      	bhi.n	8002f04 <UART_SetConfig+0x1f8>
 8002ed2:	2b80      	cmp	r3, #128	; 0x80
 8002ed4:	d00a      	beq.n	8002eec <UART_SetConfig+0x1e0>
 8002ed6:	2b80      	cmp	r3, #128	; 0x80
 8002ed8:	d814      	bhi.n	8002f04 <UART_SetConfig+0x1f8>
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d002      	beq.n	8002ee4 <UART_SetConfig+0x1d8>
 8002ede:	2b40      	cmp	r3, #64	; 0x40
 8002ee0:	d008      	beq.n	8002ef4 <UART_SetConfig+0x1e8>
 8002ee2:	e00f      	b.n	8002f04 <UART_SetConfig+0x1f8>
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002eea:	e082      	b.n	8002ff2 <UART_SetConfig+0x2e6>
 8002eec:	2302      	movs	r3, #2
 8002eee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ef2:	e07e      	b.n	8002ff2 <UART_SetConfig+0x2e6>
 8002ef4:	2304      	movs	r3, #4
 8002ef6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002efa:	e07a      	b.n	8002ff2 <UART_SetConfig+0x2e6>
 8002efc:	2308      	movs	r3, #8
 8002efe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f02:	e076      	b.n	8002ff2 <UART_SetConfig+0x2e6>
 8002f04:	2310      	movs	r3, #16
 8002f06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f0a:	e072      	b.n	8002ff2 <UART_SetConfig+0x2e6>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a35      	ldr	r2, [pc, #212]	; (8002fe8 <UART_SetConfig+0x2dc>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d12a      	bne.n	8002f6c <UART_SetConfig+0x260>
 8002f16:	4b30      	ldr	r3, [pc, #192]	; (8002fd8 <UART_SetConfig+0x2cc>)
 8002f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f24:	d01a      	beq.n	8002f5c <UART_SetConfig+0x250>
 8002f26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f2a:	d81b      	bhi.n	8002f64 <UART_SetConfig+0x258>
 8002f2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f30:	d00c      	beq.n	8002f4c <UART_SetConfig+0x240>
 8002f32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f36:	d815      	bhi.n	8002f64 <UART_SetConfig+0x258>
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d003      	beq.n	8002f44 <UART_SetConfig+0x238>
 8002f3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f40:	d008      	beq.n	8002f54 <UART_SetConfig+0x248>
 8002f42:	e00f      	b.n	8002f64 <UART_SetConfig+0x258>
 8002f44:	2300      	movs	r3, #0
 8002f46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f4a:	e052      	b.n	8002ff2 <UART_SetConfig+0x2e6>
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f52:	e04e      	b.n	8002ff2 <UART_SetConfig+0x2e6>
 8002f54:	2304      	movs	r3, #4
 8002f56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f5a:	e04a      	b.n	8002ff2 <UART_SetConfig+0x2e6>
 8002f5c:	2308      	movs	r3, #8
 8002f5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f62:	e046      	b.n	8002ff2 <UART_SetConfig+0x2e6>
 8002f64:	2310      	movs	r3, #16
 8002f66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f6a:	e042      	b.n	8002ff2 <UART_SetConfig+0x2e6>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a17      	ldr	r2, [pc, #92]	; (8002fd0 <UART_SetConfig+0x2c4>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d13a      	bne.n	8002fec <UART_SetConfig+0x2e0>
 8002f76:	4b18      	ldr	r3, [pc, #96]	; (8002fd8 <UART_SetConfig+0x2cc>)
 8002f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f7c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002f80:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f84:	d01a      	beq.n	8002fbc <UART_SetConfig+0x2b0>
 8002f86:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f8a:	d81b      	bhi.n	8002fc4 <UART_SetConfig+0x2b8>
 8002f8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f90:	d00c      	beq.n	8002fac <UART_SetConfig+0x2a0>
 8002f92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f96:	d815      	bhi.n	8002fc4 <UART_SetConfig+0x2b8>
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d003      	beq.n	8002fa4 <UART_SetConfig+0x298>
 8002f9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fa0:	d008      	beq.n	8002fb4 <UART_SetConfig+0x2a8>
 8002fa2:	e00f      	b.n	8002fc4 <UART_SetConfig+0x2b8>
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002faa:	e022      	b.n	8002ff2 <UART_SetConfig+0x2e6>
 8002fac:	2302      	movs	r3, #2
 8002fae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fb2:	e01e      	b.n	8002ff2 <UART_SetConfig+0x2e6>
 8002fb4:	2304      	movs	r3, #4
 8002fb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fba:	e01a      	b.n	8002ff2 <UART_SetConfig+0x2e6>
 8002fbc:	2308      	movs	r3, #8
 8002fbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fc2:	e016      	b.n	8002ff2 <UART_SetConfig+0x2e6>
 8002fc4:	2310      	movs	r3, #16
 8002fc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fca:	e012      	b.n	8002ff2 <UART_SetConfig+0x2e6>
 8002fcc:	efff69f3 	.word	0xefff69f3
 8002fd0:	40008000 	.word	0x40008000
 8002fd4:	40013800 	.word	0x40013800
 8002fd8:	40021000 	.word	0x40021000
 8002fdc:	40004400 	.word	0x40004400
 8002fe0:	40004800 	.word	0x40004800
 8002fe4:	40004c00 	.word	0x40004c00
 8002fe8:	40005000 	.word	0x40005000
 8002fec:	2310      	movs	r3, #16
 8002fee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a9f      	ldr	r2, [pc, #636]	; (8003274 <UART_SetConfig+0x568>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d17a      	bne.n	80030f2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002ffc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003000:	2b08      	cmp	r3, #8
 8003002:	d824      	bhi.n	800304e <UART_SetConfig+0x342>
 8003004:	a201      	add	r2, pc, #4	; (adr r2, 800300c <UART_SetConfig+0x300>)
 8003006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800300a:	bf00      	nop
 800300c:	08003031 	.word	0x08003031
 8003010:	0800304f 	.word	0x0800304f
 8003014:	08003039 	.word	0x08003039
 8003018:	0800304f 	.word	0x0800304f
 800301c:	0800303f 	.word	0x0800303f
 8003020:	0800304f 	.word	0x0800304f
 8003024:	0800304f 	.word	0x0800304f
 8003028:	0800304f 	.word	0x0800304f
 800302c:	08003047 	.word	0x08003047
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003030:	f7ff f950 	bl	80022d4 <HAL_RCC_GetPCLK1Freq>
 8003034:	61f8      	str	r0, [r7, #28]
        break;
 8003036:	e010      	b.n	800305a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003038:	4b8f      	ldr	r3, [pc, #572]	; (8003278 <UART_SetConfig+0x56c>)
 800303a:	61fb      	str	r3, [r7, #28]
        break;
 800303c:	e00d      	b.n	800305a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800303e:	f7ff f8b1 	bl	80021a4 <HAL_RCC_GetSysClockFreq>
 8003042:	61f8      	str	r0, [r7, #28]
        break;
 8003044:	e009      	b.n	800305a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003046:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800304a:	61fb      	str	r3, [r7, #28]
        break;
 800304c:	e005      	b.n	800305a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800304e:	2300      	movs	r3, #0
 8003050:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003058:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	2b00      	cmp	r3, #0
 800305e:	f000 80fb 	beq.w	8003258 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	685a      	ldr	r2, [r3, #4]
 8003066:	4613      	mov	r3, r2
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	4413      	add	r3, r2
 800306c:	69fa      	ldr	r2, [r7, #28]
 800306e:	429a      	cmp	r2, r3
 8003070:	d305      	bcc.n	800307e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003078:	69fa      	ldr	r2, [r7, #28]
 800307a:	429a      	cmp	r2, r3
 800307c:	d903      	bls.n	8003086 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003084:	e0e8      	b.n	8003258 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	2200      	movs	r2, #0
 800308a:	461c      	mov	r4, r3
 800308c:	4615      	mov	r5, r2
 800308e:	f04f 0200 	mov.w	r2, #0
 8003092:	f04f 0300 	mov.w	r3, #0
 8003096:	022b      	lsls	r3, r5, #8
 8003098:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800309c:	0222      	lsls	r2, r4, #8
 800309e:	68f9      	ldr	r1, [r7, #12]
 80030a0:	6849      	ldr	r1, [r1, #4]
 80030a2:	0849      	lsrs	r1, r1, #1
 80030a4:	2000      	movs	r0, #0
 80030a6:	4688      	mov	r8, r1
 80030a8:	4681      	mov	r9, r0
 80030aa:	eb12 0a08 	adds.w	sl, r2, r8
 80030ae:	eb43 0b09 	adc.w	fp, r3, r9
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	603b      	str	r3, [r7, #0]
 80030ba:	607a      	str	r2, [r7, #4]
 80030bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030c0:	4650      	mov	r0, sl
 80030c2:	4659      	mov	r1, fp
 80030c4:	f7fd f8dc 	bl	8000280 <__aeabi_uldivmod>
 80030c8:	4602      	mov	r2, r0
 80030ca:	460b      	mov	r3, r1
 80030cc:	4613      	mov	r3, r2
 80030ce:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030d6:	d308      	bcc.n	80030ea <UART_SetConfig+0x3de>
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030de:	d204      	bcs.n	80030ea <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	69ba      	ldr	r2, [r7, #24]
 80030e6:	60da      	str	r2, [r3, #12]
 80030e8:	e0b6      	b.n	8003258 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80030f0:	e0b2      	b.n	8003258 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	69db      	ldr	r3, [r3, #28]
 80030f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030fa:	d15e      	bne.n	80031ba <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80030fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003100:	2b08      	cmp	r3, #8
 8003102:	d828      	bhi.n	8003156 <UART_SetConfig+0x44a>
 8003104:	a201      	add	r2, pc, #4	; (adr r2, 800310c <UART_SetConfig+0x400>)
 8003106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800310a:	bf00      	nop
 800310c:	08003131 	.word	0x08003131
 8003110:	08003139 	.word	0x08003139
 8003114:	08003141 	.word	0x08003141
 8003118:	08003157 	.word	0x08003157
 800311c:	08003147 	.word	0x08003147
 8003120:	08003157 	.word	0x08003157
 8003124:	08003157 	.word	0x08003157
 8003128:	08003157 	.word	0x08003157
 800312c:	0800314f 	.word	0x0800314f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003130:	f7ff f8d0 	bl	80022d4 <HAL_RCC_GetPCLK1Freq>
 8003134:	61f8      	str	r0, [r7, #28]
        break;
 8003136:	e014      	b.n	8003162 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003138:	f7ff f8e2 	bl	8002300 <HAL_RCC_GetPCLK2Freq>
 800313c:	61f8      	str	r0, [r7, #28]
        break;
 800313e:	e010      	b.n	8003162 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003140:	4b4d      	ldr	r3, [pc, #308]	; (8003278 <UART_SetConfig+0x56c>)
 8003142:	61fb      	str	r3, [r7, #28]
        break;
 8003144:	e00d      	b.n	8003162 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003146:	f7ff f82d 	bl	80021a4 <HAL_RCC_GetSysClockFreq>
 800314a:	61f8      	str	r0, [r7, #28]
        break;
 800314c:	e009      	b.n	8003162 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800314e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003152:	61fb      	str	r3, [r7, #28]
        break;
 8003154:	e005      	b.n	8003162 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003156:	2300      	movs	r3, #0
 8003158:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003160:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d077      	beq.n	8003258 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	005a      	lsls	r2, r3, #1
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	085b      	lsrs	r3, r3, #1
 8003172:	441a      	add	r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	fbb2 f3f3 	udiv	r3, r2, r3
 800317c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	2b0f      	cmp	r3, #15
 8003182:	d916      	bls.n	80031b2 <UART_SetConfig+0x4a6>
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800318a:	d212      	bcs.n	80031b2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	b29b      	uxth	r3, r3
 8003190:	f023 030f 	bic.w	r3, r3, #15
 8003194:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	085b      	lsrs	r3, r3, #1
 800319a:	b29b      	uxth	r3, r3
 800319c:	f003 0307 	and.w	r3, r3, #7
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	8afb      	ldrh	r3, [r7, #22]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	8afa      	ldrh	r2, [r7, #22]
 80031ae:	60da      	str	r2, [r3, #12]
 80031b0:	e052      	b.n	8003258 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80031b8:	e04e      	b.n	8003258 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80031ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031be:	2b08      	cmp	r3, #8
 80031c0:	d827      	bhi.n	8003212 <UART_SetConfig+0x506>
 80031c2:	a201      	add	r2, pc, #4	; (adr r2, 80031c8 <UART_SetConfig+0x4bc>)
 80031c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c8:	080031ed 	.word	0x080031ed
 80031cc:	080031f5 	.word	0x080031f5
 80031d0:	080031fd 	.word	0x080031fd
 80031d4:	08003213 	.word	0x08003213
 80031d8:	08003203 	.word	0x08003203
 80031dc:	08003213 	.word	0x08003213
 80031e0:	08003213 	.word	0x08003213
 80031e4:	08003213 	.word	0x08003213
 80031e8:	0800320b 	.word	0x0800320b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031ec:	f7ff f872 	bl	80022d4 <HAL_RCC_GetPCLK1Freq>
 80031f0:	61f8      	str	r0, [r7, #28]
        break;
 80031f2:	e014      	b.n	800321e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031f4:	f7ff f884 	bl	8002300 <HAL_RCC_GetPCLK2Freq>
 80031f8:	61f8      	str	r0, [r7, #28]
        break;
 80031fa:	e010      	b.n	800321e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031fc:	4b1e      	ldr	r3, [pc, #120]	; (8003278 <UART_SetConfig+0x56c>)
 80031fe:	61fb      	str	r3, [r7, #28]
        break;
 8003200:	e00d      	b.n	800321e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003202:	f7fe ffcf 	bl	80021a4 <HAL_RCC_GetSysClockFreq>
 8003206:	61f8      	str	r0, [r7, #28]
        break;
 8003208:	e009      	b.n	800321e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800320a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800320e:	61fb      	str	r3, [r7, #28]
        break;
 8003210:	e005      	b.n	800321e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003212:	2300      	movs	r3, #0
 8003214:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800321c:	bf00      	nop
    }

    if (pclk != 0U)
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d019      	beq.n	8003258 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	085a      	lsrs	r2, r3, #1
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	441a      	add	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	fbb2 f3f3 	udiv	r3, r2, r3
 8003236:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	2b0f      	cmp	r3, #15
 800323c:	d909      	bls.n	8003252 <UART_SetConfig+0x546>
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003244:	d205      	bcs.n	8003252 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	b29a      	uxth	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	60da      	str	r2, [r3, #12]
 8003250:	e002      	b.n	8003258 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2200      	movs	r2, #0
 800325c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003264:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003268:	4618      	mov	r0, r3
 800326a:	3728      	adds	r7, #40	; 0x28
 800326c:	46bd      	mov	sp, r7
 800326e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003272:	bf00      	nop
 8003274:	40008000 	.word	0x40008000
 8003278:	00f42400 	.word	0x00f42400

0800327c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003288:	f003 0308 	and.w	r3, r3, #8
 800328c:	2b00      	cmp	r3, #0
 800328e:	d00a      	beq.n	80032a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	430a      	orrs	r2, r1
 80032a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00a      	beq.n	80032c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	430a      	orrs	r2, r1
 80032c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032cc:	f003 0302 	and.w	r3, r3, #2
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00a      	beq.n	80032ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	430a      	orrs	r2, r1
 80032e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ee:	f003 0304 	and.w	r3, r3, #4
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00a      	beq.n	800330c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	430a      	orrs	r2, r1
 800330a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003310:	f003 0310 	and.w	r3, r3, #16
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00a      	beq.n	800332e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	430a      	orrs	r2, r1
 800332c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003332:	f003 0320 	and.w	r3, r3, #32
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00a      	beq.n	8003350 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	430a      	orrs	r2, r1
 800334e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003358:	2b00      	cmp	r3, #0
 800335a:	d01a      	beq.n	8003392 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	430a      	orrs	r2, r1
 8003370:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800337a:	d10a      	bne.n	8003392 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	430a      	orrs	r2, r1
 8003390:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00a      	beq.n	80033b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	430a      	orrs	r2, r1
 80033b2:	605a      	str	r2, [r3, #4]
  }
}
 80033b4:	bf00      	nop
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b098      	sub	sp, #96	; 0x60
 80033c4:	af02      	add	r7, sp, #8
 80033c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80033d0:	f7fd fdf4 	bl	8000fbc <HAL_GetTick>
 80033d4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0308 	and.w	r3, r3, #8
 80033e0:	2b08      	cmp	r3, #8
 80033e2:	d12e      	bne.n	8003442 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80033e8:	9300      	str	r3, [sp, #0]
 80033ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033ec:	2200      	movs	r2, #0
 80033ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 f88c 	bl	8003510 <UART_WaitOnFlagUntilTimeout>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d021      	beq.n	8003442 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003406:	e853 3f00 	ldrex	r3, [r3]
 800340a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800340c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800340e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003412:	653b      	str	r3, [r7, #80]	; 0x50
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	461a      	mov	r2, r3
 800341a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800341c:	647b      	str	r3, [r7, #68]	; 0x44
 800341e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003420:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003422:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003424:	e841 2300 	strex	r3, r2, [r1]
 8003428:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800342a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1e6      	bne.n	80033fe <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2220      	movs	r2, #32
 8003434:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e062      	b.n	8003508 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0304 	and.w	r3, r3, #4
 800344c:	2b04      	cmp	r3, #4
 800344e:	d149      	bne.n	80034e4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003450:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003454:	9300      	str	r3, [sp, #0]
 8003456:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003458:	2200      	movs	r2, #0
 800345a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f856 	bl	8003510 <UART_WaitOnFlagUntilTimeout>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d03c      	beq.n	80034e4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003472:	e853 3f00 	ldrex	r3, [r3]
 8003476:	623b      	str	r3, [r7, #32]
   return(result);
 8003478:	6a3b      	ldr	r3, [r7, #32]
 800347a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800347e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	461a      	mov	r2, r3
 8003486:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003488:	633b      	str	r3, [r7, #48]	; 0x30
 800348a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800348c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800348e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003490:	e841 2300 	strex	r3, r2, [r1]
 8003494:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1e6      	bne.n	800346a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	3308      	adds	r3, #8
 80034a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	e853 3f00 	ldrex	r3, [r3]
 80034aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f023 0301 	bic.w	r3, r3, #1
 80034b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	3308      	adds	r3, #8
 80034ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034bc:	61fa      	str	r2, [r7, #28]
 80034be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c0:	69b9      	ldr	r1, [r7, #24]
 80034c2:	69fa      	ldr	r2, [r7, #28]
 80034c4:	e841 2300 	strex	r3, r2, [r1]
 80034c8:	617b      	str	r3, [r7, #20]
   return(result);
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d1e5      	bne.n	800349c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2220      	movs	r2, #32
 80034d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e011      	b.n	8003508 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2220      	movs	r2, #32
 80034e8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2220      	movs	r2, #32
 80034ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	3758      	adds	r7, #88	; 0x58
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	603b      	str	r3, [r7, #0]
 800351c:	4613      	mov	r3, r2
 800351e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003520:	e049      	b.n	80035b6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003528:	d045      	beq.n	80035b6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800352a:	f7fd fd47 	bl	8000fbc <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	429a      	cmp	r2, r3
 8003538:	d302      	bcc.n	8003540 <UART_WaitOnFlagUntilTimeout+0x30>
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d101      	bne.n	8003544 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e048      	b.n	80035d6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0304 	and.w	r3, r3, #4
 800354e:	2b00      	cmp	r3, #0
 8003550:	d031      	beq.n	80035b6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	69db      	ldr	r3, [r3, #28]
 8003558:	f003 0308 	and.w	r3, r3, #8
 800355c:	2b08      	cmp	r3, #8
 800355e:	d110      	bne.n	8003582 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2208      	movs	r2, #8
 8003566:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f000 f838 	bl	80035de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2208      	movs	r2, #8
 8003572:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e029      	b.n	80035d6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	69db      	ldr	r3, [r3, #28]
 8003588:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800358c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003590:	d111      	bne.n	80035b6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800359a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800359c:	68f8      	ldr	r0, [r7, #12]
 800359e:	f000 f81e 	bl	80035de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2220      	movs	r2, #32
 80035a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e00f      	b.n	80035d6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	69da      	ldr	r2, [r3, #28]
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	4013      	ands	r3, r2
 80035c0:	68ba      	ldr	r2, [r7, #8]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	bf0c      	ite	eq
 80035c6:	2301      	moveq	r3, #1
 80035c8:	2300      	movne	r3, #0
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	461a      	mov	r2, r3
 80035ce:	79fb      	ldrb	r3, [r7, #7]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d0a6      	beq.n	8003522 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3710      	adds	r7, #16
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035de:	b480      	push	{r7}
 80035e0:	b095      	sub	sp, #84	; 0x54
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035ee:	e853 3f00 	ldrex	r3, [r3]
 80035f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80035f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	461a      	mov	r2, r3
 8003602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003604:	643b      	str	r3, [r7, #64]	; 0x40
 8003606:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003608:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800360a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800360c:	e841 2300 	strex	r3, r2, [r1]
 8003610:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003614:	2b00      	cmp	r3, #0
 8003616:	d1e6      	bne.n	80035e6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	3308      	adds	r3, #8
 800361e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003620:	6a3b      	ldr	r3, [r7, #32]
 8003622:	e853 3f00 	ldrex	r3, [r3]
 8003626:	61fb      	str	r3, [r7, #28]
   return(result);
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	f023 0301 	bic.w	r3, r3, #1
 800362e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	3308      	adds	r3, #8
 8003636:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003638:	62fa      	str	r2, [r7, #44]	; 0x2c
 800363a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800363c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800363e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003640:	e841 2300 	strex	r3, r2, [r1]
 8003644:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1e5      	bne.n	8003618 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003650:	2b01      	cmp	r3, #1
 8003652:	d118      	bne.n	8003686 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	e853 3f00 	ldrex	r3, [r3]
 8003660:	60bb      	str	r3, [r7, #8]
   return(result);
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	f023 0310 	bic.w	r3, r3, #16
 8003668:	647b      	str	r3, [r7, #68]	; 0x44
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	461a      	mov	r2, r3
 8003670:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003672:	61bb      	str	r3, [r7, #24]
 8003674:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003676:	6979      	ldr	r1, [r7, #20]
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	e841 2300 	strex	r3, r2, [r1]
 800367e:	613b      	str	r3, [r7, #16]
   return(result);
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d1e6      	bne.n	8003654 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2220      	movs	r2, #32
 800368a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	669a      	str	r2, [r3, #104]	; 0x68
}
 800369a:	bf00      	nop
 800369c:	3754      	adds	r7, #84	; 0x54
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr

080036a6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b084      	sub	sp, #16
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80036c4:	68f8      	ldr	r0, [r7, #12]
 80036c6:	f7ff fb0b 	bl	8002ce0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036ca:	bf00      	nop
 80036cc:	3710      	adds	r7, #16
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}

080036d2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80036d2:	b580      	push	{r7, lr}
 80036d4:	b088      	sub	sp, #32
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	e853 3f00 	ldrex	r3, [r3]
 80036e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036ee:	61fb      	str	r3, [r7, #28]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	461a      	mov	r2, r3
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	61bb      	str	r3, [r7, #24]
 80036fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036fc:	6979      	ldr	r1, [r7, #20]
 80036fe:	69ba      	ldr	r2, [r7, #24]
 8003700:	e841 2300 	strex	r3, r2, [r1]
 8003704:	613b      	str	r3, [r7, #16]
   return(result);
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d1e6      	bne.n	80036da <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2220      	movs	r2, #32
 8003710:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f7ff fad7 	bl	8002ccc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800371e:	bf00      	nop
 8003720:	3720      	adds	r7, #32
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}

08003726 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003726:	b480      	push	{r7}
 8003728:	b083      	sub	sp, #12
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800372e:	bf00      	nop
 8003730:	370c      	adds	r7, #12
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
	...

0800373c <_vsiprintf_r>:
 800373c:	b500      	push	{lr}
 800373e:	b09b      	sub	sp, #108	; 0x6c
 8003740:	9100      	str	r1, [sp, #0]
 8003742:	9104      	str	r1, [sp, #16]
 8003744:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003748:	9105      	str	r1, [sp, #20]
 800374a:	9102      	str	r1, [sp, #8]
 800374c:	4905      	ldr	r1, [pc, #20]	; (8003764 <_vsiprintf_r+0x28>)
 800374e:	9103      	str	r1, [sp, #12]
 8003750:	4669      	mov	r1, sp
 8003752:	f000 f999 	bl	8003a88 <_svfiprintf_r>
 8003756:	9b00      	ldr	r3, [sp, #0]
 8003758:	2200      	movs	r2, #0
 800375a:	701a      	strb	r2, [r3, #0]
 800375c:	b01b      	add	sp, #108	; 0x6c
 800375e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003762:	bf00      	nop
 8003764:	ffff0208 	.word	0xffff0208

08003768 <vsiprintf>:
 8003768:	4613      	mov	r3, r2
 800376a:	460a      	mov	r2, r1
 800376c:	4601      	mov	r1, r0
 800376e:	4802      	ldr	r0, [pc, #8]	; (8003778 <vsiprintf+0x10>)
 8003770:	6800      	ldr	r0, [r0, #0]
 8003772:	f7ff bfe3 	b.w	800373c <_vsiprintf_r>
 8003776:	bf00      	nop
 8003778:	20000208 	.word	0x20000208

0800377c <memset>:
 800377c:	4402      	add	r2, r0
 800377e:	4603      	mov	r3, r0
 8003780:	4293      	cmp	r3, r2
 8003782:	d100      	bne.n	8003786 <memset+0xa>
 8003784:	4770      	bx	lr
 8003786:	f803 1b01 	strb.w	r1, [r3], #1
 800378a:	e7f9      	b.n	8003780 <memset+0x4>

0800378c <__errno>:
 800378c:	4b01      	ldr	r3, [pc, #4]	; (8003794 <__errno+0x8>)
 800378e:	6818      	ldr	r0, [r3, #0]
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	20000208 	.word	0x20000208

08003798 <__libc_init_array>:
 8003798:	b570      	push	{r4, r5, r6, lr}
 800379a:	4d0d      	ldr	r5, [pc, #52]	; (80037d0 <__libc_init_array+0x38>)
 800379c:	4c0d      	ldr	r4, [pc, #52]	; (80037d4 <__libc_init_array+0x3c>)
 800379e:	1b64      	subs	r4, r4, r5
 80037a0:	10a4      	asrs	r4, r4, #2
 80037a2:	2600      	movs	r6, #0
 80037a4:	42a6      	cmp	r6, r4
 80037a6:	d109      	bne.n	80037bc <__libc_init_array+0x24>
 80037a8:	4d0b      	ldr	r5, [pc, #44]	; (80037d8 <__libc_init_array+0x40>)
 80037aa:	4c0c      	ldr	r4, [pc, #48]	; (80037dc <__libc_init_array+0x44>)
 80037ac:	f000 fc6a 	bl	8004084 <_init>
 80037b0:	1b64      	subs	r4, r4, r5
 80037b2:	10a4      	asrs	r4, r4, #2
 80037b4:	2600      	movs	r6, #0
 80037b6:	42a6      	cmp	r6, r4
 80037b8:	d105      	bne.n	80037c6 <__libc_init_array+0x2e>
 80037ba:	bd70      	pop	{r4, r5, r6, pc}
 80037bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80037c0:	4798      	blx	r3
 80037c2:	3601      	adds	r6, #1
 80037c4:	e7ee      	b.n	80037a4 <__libc_init_array+0xc>
 80037c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80037ca:	4798      	blx	r3
 80037cc:	3601      	adds	r6, #1
 80037ce:	e7f2      	b.n	80037b6 <__libc_init_array+0x1e>
 80037d0:	080041b8 	.word	0x080041b8
 80037d4:	080041b8 	.word	0x080041b8
 80037d8:	080041b8 	.word	0x080041b8
 80037dc:	080041bc 	.word	0x080041bc

080037e0 <__retarget_lock_acquire_recursive>:
 80037e0:	4770      	bx	lr

080037e2 <__retarget_lock_release_recursive>:
 80037e2:	4770      	bx	lr

080037e4 <_free_r>:
 80037e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80037e6:	2900      	cmp	r1, #0
 80037e8:	d044      	beq.n	8003874 <_free_r+0x90>
 80037ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037ee:	9001      	str	r0, [sp, #4]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	f1a1 0404 	sub.w	r4, r1, #4
 80037f6:	bfb8      	it	lt
 80037f8:	18e4      	addlt	r4, r4, r3
 80037fa:	f000 f8df 	bl	80039bc <__malloc_lock>
 80037fe:	4a1e      	ldr	r2, [pc, #120]	; (8003878 <_free_r+0x94>)
 8003800:	9801      	ldr	r0, [sp, #4]
 8003802:	6813      	ldr	r3, [r2, #0]
 8003804:	b933      	cbnz	r3, 8003814 <_free_r+0x30>
 8003806:	6063      	str	r3, [r4, #4]
 8003808:	6014      	str	r4, [r2, #0]
 800380a:	b003      	add	sp, #12
 800380c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003810:	f000 b8da 	b.w	80039c8 <__malloc_unlock>
 8003814:	42a3      	cmp	r3, r4
 8003816:	d908      	bls.n	800382a <_free_r+0x46>
 8003818:	6825      	ldr	r5, [r4, #0]
 800381a:	1961      	adds	r1, r4, r5
 800381c:	428b      	cmp	r3, r1
 800381e:	bf01      	itttt	eq
 8003820:	6819      	ldreq	r1, [r3, #0]
 8003822:	685b      	ldreq	r3, [r3, #4]
 8003824:	1949      	addeq	r1, r1, r5
 8003826:	6021      	streq	r1, [r4, #0]
 8003828:	e7ed      	b.n	8003806 <_free_r+0x22>
 800382a:	461a      	mov	r2, r3
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	b10b      	cbz	r3, 8003834 <_free_r+0x50>
 8003830:	42a3      	cmp	r3, r4
 8003832:	d9fa      	bls.n	800382a <_free_r+0x46>
 8003834:	6811      	ldr	r1, [r2, #0]
 8003836:	1855      	adds	r5, r2, r1
 8003838:	42a5      	cmp	r5, r4
 800383a:	d10b      	bne.n	8003854 <_free_r+0x70>
 800383c:	6824      	ldr	r4, [r4, #0]
 800383e:	4421      	add	r1, r4
 8003840:	1854      	adds	r4, r2, r1
 8003842:	42a3      	cmp	r3, r4
 8003844:	6011      	str	r1, [r2, #0]
 8003846:	d1e0      	bne.n	800380a <_free_r+0x26>
 8003848:	681c      	ldr	r4, [r3, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	6053      	str	r3, [r2, #4]
 800384e:	440c      	add	r4, r1
 8003850:	6014      	str	r4, [r2, #0]
 8003852:	e7da      	b.n	800380a <_free_r+0x26>
 8003854:	d902      	bls.n	800385c <_free_r+0x78>
 8003856:	230c      	movs	r3, #12
 8003858:	6003      	str	r3, [r0, #0]
 800385a:	e7d6      	b.n	800380a <_free_r+0x26>
 800385c:	6825      	ldr	r5, [r4, #0]
 800385e:	1961      	adds	r1, r4, r5
 8003860:	428b      	cmp	r3, r1
 8003862:	bf04      	itt	eq
 8003864:	6819      	ldreq	r1, [r3, #0]
 8003866:	685b      	ldreq	r3, [r3, #4]
 8003868:	6063      	str	r3, [r4, #4]
 800386a:	bf04      	itt	eq
 800386c:	1949      	addeq	r1, r1, r5
 800386e:	6021      	streq	r1, [r4, #0]
 8003870:	6054      	str	r4, [r2, #4]
 8003872:	e7ca      	b.n	800380a <_free_r+0x26>
 8003874:	b003      	add	sp, #12
 8003876:	bd30      	pop	{r4, r5, pc}
 8003878:	2000049c 	.word	0x2000049c

0800387c <sbrk_aligned>:
 800387c:	b570      	push	{r4, r5, r6, lr}
 800387e:	4e0e      	ldr	r6, [pc, #56]	; (80038b8 <sbrk_aligned+0x3c>)
 8003880:	460c      	mov	r4, r1
 8003882:	6831      	ldr	r1, [r6, #0]
 8003884:	4605      	mov	r5, r0
 8003886:	b911      	cbnz	r1, 800388e <sbrk_aligned+0x12>
 8003888:	f000 fba6 	bl	8003fd8 <_sbrk_r>
 800388c:	6030      	str	r0, [r6, #0]
 800388e:	4621      	mov	r1, r4
 8003890:	4628      	mov	r0, r5
 8003892:	f000 fba1 	bl	8003fd8 <_sbrk_r>
 8003896:	1c43      	adds	r3, r0, #1
 8003898:	d00a      	beq.n	80038b0 <sbrk_aligned+0x34>
 800389a:	1cc4      	adds	r4, r0, #3
 800389c:	f024 0403 	bic.w	r4, r4, #3
 80038a0:	42a0      	cmp	r0, r4
 80038a2:	d007      	beq.n	80038b4 <sbrk_aligned+0x38>
 80038a4:	1a21      	subs	r1, r4, r0
 80038a6:	4628      	mov	r0, r5
 80038a8:	f000 fb96 	bl	8003fd8 <_sbrk_r>
 80038ac:	3001      	adds	r0, #1
 80038ae:	d101      	bne.n	80038b4 <sbrk_aligned+0x38>
 80038b0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80038b4:	4620      	mov	r0, r4
 80038b6:	bd70      	pop	{r4, r5, r6, pc}
 80038b8:	200004a0 	.word	0x200004a0

080038bc <_malloc_r>:
 80038bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80038c0:	1ccd      	adds	r5, r1, #3
 80038c2:	f025 0503 	bic.w	r5, r5, #3
 80038c6:	3508      	adds	r5, #8
 80038c8:	2d0c      	cmp	r5, #12
 80038ca:	bf38      	it	cc
 80038cc:	250c      	movcc	r5, #12
 80038ce:	2d00      	cmp	r5, #0
 80038d0:	4607      	mov	r7, r0
 80038d2:	db01      	blt.n	80038d8 <_malloc_r+0x1c>
 80038d4:	42a9      	cmp	r1, r5
 80038d6:	d905      	bls.n	80038e4 <_malloc_r+0x28>
 80038d8:	230c      	movs	r3, #12
 80038da:	603b      	str	r3, [r7, #0]
 80038dc:	2600      	movs	r6, #0
 80038de:	4630      	mov	r0, r6
 80038e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038e4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80039b8 <_malloc_r+0xfc>
 80038e8:	f000 f868 	bl	80039bc <__malloc_lock>
 80038ec:	f8d8 3000 	ldr.w	r3, [r8]
 80038f0:	461c      	mov	r4, r3
 80038f2:	bb5c      	cbnz	r4, 800394c <_malloc_r+0x90>
 80038f4:	4629      	mov	r1, r5
 80038f6:	4638      	mov	r0, r7
 80038f8:	f7ff ffc0 	bl	800387c <sbrk_aligned>
 80038fc:	1c43      	adds	r3, r0, #1
 80038fe:	4604      	mov	r4, r0
 8003900:	d155      	bne.n	80039ae <_malloc_r+0xf2>
 8003902:	f8d8 4000 	ldr.w	r4, [r8]
 8003906:	4626      	mov	r6, r4
 8003908:	2e00      	cmp	r6, #0
 800390a:	d145      	bne.n	8003998 <_malloc_r+0xdc>
 800390c:	2c00      	cmp	r4, #0
 800390e:	d048      	beq.n	80039a2 <_malloc_r+0xe6>
 8003910:	6823      	ldr	r3, [r4, #0]
 8003912:	4631      	mov	r1, r6
 8003914:	4638      	mov	r0, r7
 8003916:	eb04 0903 	add.w	r9, r4, r3
 800391a:	f000 fb5d 	bl	8003fd8 <_sbrk_r>
 800391e:	4581      	cmp	r9, r0
 8003920:	d13f      	bne.n	80039a2 <_malloc_r+0xe6>
 8003922:	6821      	ldr	r1, [r4, #0]
 8003924:	1a6d      	subs	r5, r5, r1
 8003926:	4629      	mov	r1, r5
 8003928:	4638      	mov	r0, r7
 800392a:	f7ff ffa7 	bl	800387c <sbrk_aligned>
 800392e:	3001      	adds	r0, #1
 8003930:	d037      	beq.n	80039a2 <_malloc_r+0xe6>
 8003932:	6823      	ldr	r3, [r4, #0]
 8003934:	442b      	add	r3, r5
 8003936:	6023      	str	r3, [r4, #0]
 8003938:	f8d8 3000 	ldr.w	r3, [r8]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d038      	beq.n	80039b2 <_malloc_r+0xf6>
 8003940:	685a      	ldr	r2, [r3, #4]
 8003942:	42a2      	cmp	r2, r4
 8003944:	d12b      	bne.n	800399e <_malloc_r+0xe2>
 8003946:	2200      	movs	r2, #0
 8003948:	605a      	str	r2, [r3, #4]
 800394a:	e00f      	b.n	800396c <_malloc_r+0xb0>
 800394c:	6822      	ldr	r2, [r4, #0]
 800394e:	1b52      	subs	r2, r2, r5
 8003950:	d41f      	bmi.n	8003992 <_malloc_r+0xd6>
 8003952:	2a0b      	cmp	r2, #11
 8003954:	d917      	bls.n	8003986 <_malloc_r+0xca>
 8003956:	1961      	adds	r1, r4, r5
 8003958:	42a3      	cmp	r3, r4
 800395a:	6025      	str	r5, [r4, #0]
 800395c:	bf18      	it	ne
 800395e:	6059      	strne	r1, [r3, #4]
 8003960:	6863      	ldr	r3, [r4, #4]
 8003962:	bf08      	it	eq
 8003964:	f8c8 1000 	streq.w	r1, [r8]
 8003968:	5162      	str	r2, [r4, r5]
 800396a:	604b      	str	r3, [r1, #4]
 800396c:	4638      	mov	r0, r7
 800396e:	f104 060b 	add.w	r6, r4, #11
 8003972:	f000 f829 	bl	80039c8 <__malloc_unlock>
 8003976:	f026 0607 	bic.w	r6, r6, #7
 800397a:	1d23      	adds	r3, r4, #4
 800397c:	1af2      	subs	r2, r6, r3
 800397e:	d0ae      	beq.n	80038de <_malloc_r+0x22>
 8003980:	1b9b      	subs	r3, r3, r6
 8003982:	50a3      	str	r3, [r4, r2]
 8003984:	e7ab      	b.n	80038de <_malloc_r+0x22>
 8003986:	42a3      	cmp	r3, r4
 8003988:	6862      	ldr	r2, [r4, #4]
 800398a:	d1dd      	bne.n	8003948 <_malloc_r+0x8c>
 800398c:	f8c8 2000 	str.w	r2, [r8]
 8003990:	e7ec      	b.n	800396c <_malloc_r+0xb0>
 8003992:	4623      	mov	r3, r4
 8003994:	6864      	ldr	r4, [r4, #4]
 8003996:	e7ac      	b.n	80038f2 <_malloc_r+0x36>
 8003998:	4634      	mov	r4, r6
 800399a:	6876      	ldr	r6, [r6, #4]
 800399c:	e7b4      	b.n	8003908 <_malloc_r+0x4c>
 800399e:	4613      	mov	r3, r2
 80039a0:	e7cc      	b.n	800393c <_malloc_r+0x80>
 80039a2:	230c      	movs	r3, #12
 80039a4:	603b      	str	r3, [r7, #0]
 80039a6:	4638      	mov	r0, r7
 80039a8:	f000 f80e 	bl	80039c8 <__malloc_unlock>
 80039ac:	e797      	b.n	80038de <_malloc_r+0x22>
 80039ae:	6025      	str	r5, [r4, #0]
 80039b0:	e7dc      	b.n	800396c <_malloc_r+0xb0>
 80039b2:	605b      	str	r3, [r3, #4]
 80039b4:	deff      	udf	#255	; 0xff
 80039b6:	bf00      	nop
 80039b8:	2000049c 	.word	0x2000049c

080039bc <__malloc_lock>:
 80039bc:	4801      	ldr	r0, [pc, #4]	; (80039c4 <__malloc_lock+0x8>)
 80039be:	f7ff bf0f 	b.w	80037e0 <__retarget_lock_acquire_recursive>
 80039c2:	bf00      	nop
 80039c4:	20000498 	.word	0x20000498

080039c8 <__malloc_unlock>:
 80039c8:	4801      	ldr	r0, [pc, #4]	; (80039d0 <__malloc_unlock+0x8>)
 80039ca:	f7ff bf0a 	b.w	80037e2 <__retarget_lock_release_recursive>
 80039ce:	bf00      	nop
 80039d0:	20000498 	.word	0x20000498

080039d4 <__ssputs_r>:
 80039d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039d8:	688e      	ldr	r6, [r1, #8]
 80039da:	461f      	mov	r7, r3
 80039dc:	42be      	cmp	r6, r7
 80039de:	680b      	ldr	r3, [r1, #0]
 80039e0:	4682      	mov	sl, r0
 80039e2:	460c      	mov	r4, r1
 80039e4:	4690      	mov	r8, r2
 80039e6:	d82c      	bhi.n	8003a42 <__ssputs_r+0x6e>
 80039e8:	898a      	ldrh	r2, [r1, #12]
 80039ea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80039ee:	d026      	beq.n	8003a3e <__ssputs_r+0x6a>
 80039f0:	6965      	ldr	r5, [r4, #20]
 80039f2:	6909      	ldr	r1, [r1, #16]
 80039f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80039f8:	eba3 0901 	sub.w	r9, r3, r1
 80039fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003a00:	1c7b      	adds	r3, r7, #1
 8003a02:	444b      	add	r3, r9
 8003a04:	106d      	asrs	r5, r5, #1
 8003a06:	429d      	cmp	r5, r3
 8003a08:	bf38      	it	cc
 8003a0a:	461d      	movcc	r5, r3
 8003a0c:	0553      	lsls	r3, r2, #21
 8003a0e:	d527      	bpl.n	8003a60 <__ssputs_r+0x8c>
 8003a10:	4629      	mov	r1, r5
 8003a12:	f7ff ff53 	bl	80038bc <_malloc_r>
 8003a16:	4606      	mov	r6, r0
 8003a18:	b360      	cbz	r0, 8003a74 <__ssputs_r+0xa0>
 8003a1a:	6921      	ldr	r1, [r4, #16]
 8003a1c:	464a      	mov	r2, r9
 8003a1e:	f000 faeb 	bl	8003ff8 <memcpy>
 8003a22:	89a3      	ldrh	r3, [r4, #12]
 8003a24:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a2c:	81a3      	strh	r3, [r4, #12]
 8003a2e:	6126      	str	r6, [r4, #16]
 8003a30:	6165      	str	r5, [r4, #20]
 8003a32:	444e      	add	r6, r9
 8003a34:	eba5 0509 	sub.w	r5, r5, r9
 8003a38:	6026      	str	r6, [r4, #0]
 8003a3a:	60a5      	str	r5, [r4, #8]
 8003a3c:	463e      	mov	r6, r7
 8003a3e:	42be      	cmp	r6, r7
 8003a40:	d900      	bls.n	8003a44 <__ssputs_r+0x70>
 8003a42:	463e      	mov	r6, r7
 8003a44:	6820      	ldr	r0, [r4, #0]
 8003a46:	4632      	mov	r2, r6
 8003a48:	4641      	mov	r1, r8
 8003a4a:	f000 faab 	bl	8003fa4 <memmove>
 8003a4e:	68a3      	ldr	r3, [r4, #8]
 8003a50:	1b9b      	subs	r3, r3, r6
 8003a52:	60a3      	str	r3, [r4, #8]
 8003a54:	6823      	ldr	r3, [r4, #0]
 8003a56:	4433      	add	r3, r6
 8003a58:	6023      	str	r3, [r4, #0]
 8003a5a:	2000      	movs	r0, #0
 8003a5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a60:	462a      	mov	r2, r5
 8003a62:	f000 fad7 	bl	8004014 <_realloc_r>
 8003a66:	4606      	mov	r6, r0
 8003a68:	2800      	cmp	r0, #0
 8003a6a:	d1e0      	bne.n	8003a2e <__ssputs_r+0x5a>
 8003a6c:	6921      	ldr	r1, [r4, #16]
 8003a6e:	4650      	mov	r0, sl
 8003a70:	f7ff feb8 	bl	80037e4 <_free_r>
 8003a74:	230c      	movs	r3, #12
 8003a76:	f8ca 3000 	str.w	r3, [sl]
 8003a7a:	89a3      	ldrh	r3, [r4, #12]
 8003a7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a80:	81a3      	strh	r3, [r4, #12]
 8003a82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a86:	e7e9      	b.n	8003a5c <__ssputs_r+0x88>

08003a88 <_svfiprintf_r>:
 8003a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a8c:	4698      	mov	r8, r3
 8003a8e:	898b      	ldrh	r3, [r1, #12]
 8003a90:	061b      	lsls	r3, r3, #24
 8003a92:	b09d      	sub	sp, #116	; 0x74
 8003a94:	4607      	mov	r7, r0
 8003a96:	460d      	mov	r5, r1
 8003a98:	4614      	mov	r4, r2
 8003a9a:	d50e      	bpl.n	8003aba <_svfiprintf_r+0x32>
 8003a9c:	690b      	ldr	r3, [r1, #16]
 8003a9e:	b963      	cbnz	r3, 8003aba <_svfiprintf_r+0x32>
 8003aa0:	2140      	movs	r1, #64	; 0x40
 8003aa2:	f7ff ff0b 	bl	80038bc <_malloc_r>
 8003aa6:	6028      	str	r0, [r5, #0]
 8003aa8:	6128      	str	r0, [r5, #16]
 8003aaa:	b920      	cbnz	r0, 8003ab6 <_svfiprintf_r+0x2e>
 8003aac:	230c      	movs	r3, #12
 8003aae:	603b      	str	r3, [r7, #0]
 8003ab0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ab4:	e0d0      	b.n	8003c58 <_svfiprintf_r+0x1d0>
 8003ab6:	2340      	movs	r3, #64	; 0x40
 8003ab8:	616b      	str	r3, [r5, #20]
 8003aba:	2300      	movs	r3, #0
 8003abc:	9309      	str	r3, [sp, #36]	; 0x24
 8003abe:	2320      	movs	r3, #32
 8003ac0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003ac4:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ac8:	2330      	movs	r3, #48	; 0x30
 8003aca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003c70 <_svfiprintf_r+0x1e8>
 8003ace:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ad2:	f04f 0901 	mov.w	r9, #1
 8003ad6:	4623      	mov	r3, r4
 8003ad8:	469a      	mov	sl, r3
 8003ada:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ade:	b10a      	cbz	r2, 8003ae4 <_svfiprintf_r+0x5c>
 8003ae0:	2a25      	cmp	r2, #37	; 0x25
 8003ae2:	d1f9      	bne.n	8003ad8 <_svfiprintf_r+0x50>
 8003ae4:	ebba 0b04 	subs.w	fp, sl, r4
 8003ae8:	d00b      	beq.n	8003b02 <_svfiprintf_r+0x7a>
 8003aea:	465b      	mov	r3, fp
 8003aec:	4622      	mov	r2, r4
 8003aee:	4629      	mov	r1, r5
 8003af0:	4638      	mov	r0, r7
 8003af2:	f7ff ff6f 	bl	80039d4 <__ssputs_r>
 8003af6:	3001      	adds	r0, #1
 8003af8:	f000 80a9 	beq.w	8003c4e <_svfiprintf_r+0x1c6>
 8003afc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003afe:	445a      	add	r2, fp
 8003b00:	9209      	str	r2, [sp, #36]	; 0x24
 8003b02:	f89a 3000 	ldrb.w	r3, [sl]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	f000 80a1 	beq.w	8003c4e <_svfiprintf_r+0x1c6>
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b16:	f10a 0a01 	add.w	sl, sl, #1
 8003b1a:	9304      	str	r3, [sp, #16]
 8003b1c:	9307      	str	r3, [sp, #28]
 8003b1e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003b22:	931a      	str	r3, [sp, #104]	; 0x68
 8003b24:	4654      	mov	r4, sl
 8003b26:	2205      	movs	r2, #5
 8003b28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b2c:	4850      	ldr	r0, [pc, #320]	; (8003c70 <_svfiprintf_r+0x1e8>)
 8003b2e:	f7fc fb57 	bl	80001e0 <memchr>
 8003b32:	9a04      	ldr	r2, [sp, #16]
 8003b34:	b9d8      	cbnz	r0, 8003b6e <_svfiprintf_r+0xe6>
 8003b36:	06d0      	lsls	r0, r2, #27
 8003b38:	bf44      	itt	mi
 8003b3a:	2320      	movmi	r3, #32
 8003b3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b40:	0711      	lsls	r1, r2, #28
 8003b42:	bf44      	itt	mi
 8003b44:	232b      	movmi	r3, #43	; 0x2b
 8003b46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b4a:	f89a 3000 	ldrb.w	r3, [sl]
 8003b4e:	2b2a      	cmp	r3, #42	; 0x2a
 8003b50:	d015      	beq.n	8003b7e <_svfiprintf_r+0xf6>
 8003b52:	9a07      	ldr	r2, [sp, #28]
 8003b54:	4654      	mov	r4, sl
 8003b56:	2000      	movs	r0, #0
 8003b58:	f04f 0c0a 	mov.w	ip, #10
 8003b5c:	4621      	mov	r1, r4
 8003b5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b62:	3b30      	subs	r3, #48	; 0x30
 8003b64:	2b09      	cmp	r3, #9
 8003b66:	d94d      	bls.n	8003c04 <_svfiprintf_r+0x17c>
 8003b68:	b1b0      	cbz	r0, 8003b98 <_svfiprintf_r+0x110>
 8003b6a:	9207      	str	r2, [sp, #28]
 8003b6c:	e014      	b.n	8003b98 <_svfiprintf_r+0x110>
 8003b6e:	eba0 0308 	sub.w	r3, r0, r8
 8003b72:	fa09 f303 	lsl.w	r3, r9, r3
 8003b76:	4313      	orrs	r3, r2
 8003b78:	9304      	str	r3, [sp, #16]
 8003b7a:	46a2      	mov	sl, r4
 8003b7c:	e7d2      	b.n	8003b24 <_svfiprintf_r+0x9c>
 8003b7e:	9b03      	ldr	r3, [sp, #12]
 8003b80:	1d19      	adds	r1, r3, #4
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	9103      	str	r1, [sp, #12]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	bfbb      	ittet	lt
 8003b8a:	425b      	neglt	r3, r3
 8003b8c:	f042 0202 	orrlt.w	r2, r2, #2
 8003b90:	9307      	strge	r3, [sp, #28]
 8003b92:	9307      	strlt	r3, [sp, #28]
 8003b94:	bfb8      	it	lt
 8003b96:	9204      	strlt	r2, [sp, #16]
 8003b98:	7823      	ldrb	r3, [r4, #0]
 8003b9a:	2b2e      	cmp	r3, #46	; 0x2e
 8003b9c:	d10c      	bne.n	8003bb8 <_svfiprintf_r+0x130>
 8003b9e:	7863      	ldrb	r3, [r4, #1]
 8003ba0:	2b2a      	cmp	r3, #42	; 0x2a
 8003ba2:	d134      	bne.n	8003c0e <_svfiprintf_r+0x186>
 8003ba4:	9b03      	ldr	r3, [sp, #12]
 8003ba6:	1d1a      	adds	r2, r3, #4
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	9203      	str	r2, [sp, #12]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	bfb8      	it	lt
 8003bb0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003bb4:	3402      	adds	r4, #2
 8003bb6:	9305      	str	r3, [sp, #20]
 8003bb8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003c80 <_svfiprintf_r+0x1f8>
 8003bbc:	7821      	ldrb	r1, [r4, #0]
 8003bbe:	2203      	movs	r2, #3
 8003bc0:	4650      	mov	r0, sl
 8003bc2:	f7fc fb0d 	bl	80001e0 <memchr>
 8003bc6:	b138      	cbz	r0, 8003bd8 <_svfiprintf_r+0x150>
 8003bc8:	9b04      	ldr	r3, [sp, #16]
 8003bca:	eba0 000a 	sub.w	r0, r0, sl
 8003bce:	2240      	movs	r2, #64	; 0x40
 8003bd0:	4082      	lsls	r2, r0
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	3401      	adds	r4, #1
 8003bd6:	9304      	str	r3, [sp, #16]
 8003bd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bdc:	4825      	ldr	r0, [pc, #148]	; (8003c74 <_svfiprintf_r+0x1ec>)
 8003bde:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003be2:	2206      	movs	r2, #6
 8003be4:	f7fc fafc 	bl	80001e0 <memchr>
 8003be8:	2800      	cmp	r0, #0
 8003bea:	d038      	beq.n	8003c5e <_svfiprintf_r+0x1d6>
 8003bec:	4b22      	ldr	r3, [pc, #136]	; (8003c78 <_svfiprintf_r+0x1f0>)
 8003bee:	bb1b      	cbnz	r3, 8003c38 <_svfiprintf_r+0x1b0>
 8003bf0:	9b03      	ldr	r3, [sp, #12]
 8003bf2:	3307      	adds	r3, #7
 8003bf4:	f023 0307 	bic.w	r3, r3, #7
 8003bf8:	3308      	adds	r3, #8
 8003bfa:	9303      	str	r3, [sp, #12]
 8003bfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bfe:	4433      	add	r3, r6
 8003c00:	9309      	str	r3, [sp, #36]	; 0x24
 8003c02:	e768      	b.n	8003ad6 <_svfiprintf_r+0x4e>
 8003c04:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c08:	460c      	mov	r4, r1
 8003c0a:	2001      	movs	r0, #1
 8003c0c:	e7a6      	b.n	8003b5c <_svfiprintf_r+0xd4>
 8003c0e:	2300      	movs	r3, #0
 8003c10:	3401      	adds	r4, #1
 8003c12:	9305      	str	r3, [sp, #20]
 8003c14:	4619      	mov	r1, r3
 8003c16:	f04f 0c0a 	mov.w	ip, #10
 8003c1a:	4620      	mov	r0, r4
 8003c1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c20:	3a30      	subs	r2, #48	; 0x30
 8003c22:	2a09      	cmp	r2, #9
 8003c24:	d903      	bls.n	8003c2e <_svfiprintf_r+0x1a6>
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d0c6      	beq.n	8003bb8 <_svfiprintf_r+0x130>
 8003c2a:	9105      	str	r1, [sp, #20]
 8003c2c:	e7c4      	b.n	8003bb8 <_svfiprintf_r+0x130>
 8003c2e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c32:	4604      	mov	r4, r0
 8003c34:	2301      	movs	r3, #1
 8003c36:	e7f0      	b.n	8003c1a <_svfiprintf_r+0x192>
 8003c38:	ab03      	add	r3, sp, #12
 8003c3a:	9300      	str	r3, [sp, #0]
 8003c3c:	462a      	mov	r2, r5
 8003c3e:	4b0f      	ldr	r3, [pc, #60]	; (8003c7c <_svfiprintf_r+0x1f4>)
 8003c40:	a904      	add	r1, sp, #16
 8003c42:	4638      	mov	r0, r7
 8003c44:	f3af 8000 	nop.w
 8003c48:	1c42      	adds	r2, r0, #1
 8003c4a:	4606      	mov	r6, r0
 8003c4c:	d1d6      	bne.n	8003bfc <_svfiprintf_r+0x174>
 8003c4e:	89ab      	ldrh	r3, [r5, #12]
 8003c50:	065b      	lsls	r3, r3, #25
 8003c52:	f53f af2d 	bmi.w	8003ab0 <_svfiprintf_r+0x28>
 8003c56:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c58:	b01d      	add	sp, #116	; 0x74
 8003c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c5e:	ab03      	add	r3, sp, #12
 8003c60:	9300      	str	r3, [sp, #0]
 8003c62:	462a      	mov	r2, r5
 8003c64:	4b05      	ldr	r3, [pc, #20]	; (8003c7c <_svfiprintf_r+0x1f4>)
 8003c66:	a904      	add	r1, sp, #16
 8003c68:	4638      	mov	r0, r7
 8003c6a:	f000 f879 	bl	8003d60 <_printf_i>
 8003c6e:	e7eb      	b.n	8003c48 <_svfiprintf_r+0x1c0>
 8003c70:	0800417a 	.word	0x0800417a
 8003c74:	08004184 	.word	0x08004184
 8003c78:	00000000 	.word	0x00000000
 8003c7c:	080039d5 	.word	0x080039d5
 8003c80:	08004180 	.word	0x08004180

08003c84 <_printf_common>:
 8003c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c88:	4616      	mov	r6, r2
 8003c8a:	4699      	mov	r9, r3
 8003c8c:	688a      	ldr	r2, [r1, #8]
 8003c8e:	690b      	ldr	r3, [r1, #16]
 8003c90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c94:	4293      	cmp	r3, r2
 8003c96:	bfb8      	it	lt
 8003c98:	4613      	movlt	r3, r2
 8003c9a:	6033      	str	r3, [r6, #0]
 8003c9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ca0:	4607      	mov	r7, r0
 8003ca2:	460c      	mov	r4, r1
 8003ca4:	b10a      	cbz	r2, 8003caa <_printf_common+0x26>
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	6033      	str	r3, [r6, #0]
 8003caa:	6823      	ldr	r3, [r4, #0]
 8003cac:	0699      	lsls	r1, r3, #26
 8003cae:	bf42      	ittt	mi
 8003cb0:	6833      	ldrmi	r3, [r6, #0]
 8003cb2:	3302      	addmi	r3, #2
 8003cb4:	6033      	strmi	r3, [r6, #0]
 8003cb6:	6825      	ldr	r5, [r4, #0]
 8003cb8:	f015 0506 	ands.w	r5, r5, #6
 8003cbc:	d106      	bne.n	8003ccc <_printf_common+0x48>
 8003cbe:	f104 0a19 	add.w	sl, r4, #25
 8003cc2:	68e3      	ldr	r3, [r4, #12]
 8003cc4:	6832      	ldr	r2, [r6, #0]
 8003cc6:	1a9b      	subs	r3, r3, r2
 8003cc8:	42ab      	cmp	r3, r5
 8003cca:	dc26      	bgt.n	8003d1a <_printf_common+0x96>
 8003ccc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003cd0:	1e13      	subs	r3, r2, #0
 8003cd2:	6822      	ldr	r2, [r4, #0]
 8003cd4:	bf18      	it	ne
 8003cd6:	2301      	movne	r3, #1
 8003cd8:	0692      	lsls	r2, r2, #26
 8003cda:	d42b      	bmi.n	8003d34 <_printf_common+0xb0>
 8003cdc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ce0:	4649      	mov	r1, r9
 8003ce2:	4638      	mov	r0, r7
 8003ce4:	47c0      	blx	r8
 8003ce6:	3001      	adds	r0, #1
 8003ce8:	d01e      	beq.n	8003d28 <_printf_common+0xa4>
 8003cea:	6823      	ldr	r3, [r4, #0]
 8003cec:	6922      	ldr	r2, [r4, #16]
 8003cee:	f003 0306 	and.w	r3, r3, #6
 8003cf2:	2b04      	cmp	r3, #4
 8003cf4:	bf02      	ittt	eq
 8003cf6:	68e5      	ldreq	r5, [r4, #12]
 8003cf8:	6833      	ldreq	r3, [r6, #0]
 8003cfa:	1aed      	subeq	r5, r5, r3
 8003cfc:	68a3      	ldr	r3, [r4, #8]
 8003cfe:	bf0c      	ite	eq
 8003d00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d04:	2500      	movne	r5, #0
 8003d06:	4293      	cmp	r3, r2
 8003d08:	bfc4      	itt	gt
 8003d0a:	1a9b      	subgt	r3, r3, r2
 8003d0c:	18ed      	addgt	r5, r5, r3
 8003d0e:	2600      	movs	r6, #0
 8003d10:	341a      	adds	r4, #26
 8003d12:	42b5      	cmp	r5, r6
 8003d14:	d11a      	bne.n	8003d4c <_printf_common+0xc8>
 8003d16:	2000      	movs	r0, #0
 8003d18:	e008      	b.n	8003d2c <_printf_common+0xa8>
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	4652      	mov	r2, sl
 8003d1e:	4649      	mov	r1, r9
 8003d20:	4638      	mov	r0, r7
 8003d22:	47c0      	blx	r8
 8003d24:	3001      	adds	r0, #1
 8003d26:	d103      	bne.n	8003d30 <_printf_common+0xac>
 8003d28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d30:	3501      	adds	r5, #1
 8003d32:	e7c6      	b.n	8003cc2 <_printf_common+0x3e>
 8003d34:	18e1      	adds	r1, r4, r3
 8003d36:	1c5a      	adds	r2, r3, #1
 8003d38:	2030      	movs	r0, #48	; 0x30
 8003d3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d3e:	4422      	add	r2, r4
 8003d40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d48:	3302      	adds	r3, #2
 8003d4a:	e7c7      	b.n	8003cdc <_printf_common+0x58>
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	4622      	mov	r2, r4
 8003d50:	4649      	mov	r1, r9
 8003d52:	4638      	mov	r0, r7
 8003d54:	47c0      	blx	r8
 8003d56:	3001      	adds	r0, #1
 8003d58:	d0e6      	beq.n	8003d28 <_printf_common+0xa4>
 8003d5a:	3601      	adds	r6, #1
 8003d5c:	e7d9      	b.n	8003d12 <_printf_common+0x8e>
	...

08003d60 <_printf_i>:
 8003d60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d64:	7e0f      	ldrb	r7, [r1, #24]
 8003d66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003d68:	2f78      	cmp	r7, #120	; 0x78
 8003d6a:	4691      	mov	r9, r2
 8003d6c:	4680      	mov	r8, r0
 8003d6e:	460c      	mov	r4, r1
 8003d70:	469a      	mov	sl, r3
 8003d72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003d76:	d807      	bhi.n	8003d88 <_printf_i+0x28>
 8003d78:	2f62      	cmp	r7, #98	; 0x62
 8003d7a:	d80a      	bhi.n	8003d92 <_printf_i+0x32>
 8003d7c:	2f00      	cmp	r7, #0
 8003d7e:	f000 80d4 	beq.w	8003f2a <_printf_i+0x1ca>
 8003d82:	2f58      	cmp	r7, #88	; 0x58
 8003d84:	f000 80c0 	beq.w	8003f08 <_printf_i+0x1a8>
 8003d88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003d90:	e03a      	b.n	8003e08 <_printf_i+0xa8>
 8003d92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003d96:	2b15      	cmp	r3, #21
 8003d98:	d8f6      	bhi.n	8003d88 <_printf_i+0x28>
 8003d9a:	a101      	add	r1, pc, #4	; (adr r1, 8003da0 <_printf_i+0x40>)
 8003d9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003da0:	08003df9 	.word	0x08003df9
 8003da4:	08003e0d 	.word	0x08003e0d
 8003da8:	08003d89 	.word	0x08003d89
 8003dac:	08003d89 	.word	0x08003d89
 8003db0:	08003d89 	.word	0x08003d89
 8003db4:	08003d89 	.word	0x08003d89
 8003db8:	08003e0d 	.word	0x08003e0d
 8003dbc:	08003d89 	.word	0x08003d89
 8003dc0:	08003d89 	.word	0x08003d89
 8003dc4:	08003d89 	.word	0x08003d89
 8003dc8:	08003d89 	.word	0x08003d89
 8003dcc:	08003f11 	.word	0x08003f11
 8003dd0:	08003e39 	.word	0x08003e39
 8003dd4:	08003ecb 	.word	0x08003ecb
 8003dd8:	08003d89 	.word	0x08003d89
 8003ddc:	08003d89 	.word	0x08003d89
 8003de0:	08003f33 	.word	0x08003f33
 8003de4:	08003d89 	.word	0x08003d89
 8003de8:	08003e39 	.word	0x08003e39
 8003dec:	08003d89 	.word	0x08003d89
 8003df0:	08003d89 	.word	0x08003d89
 8003df4:	08003ed3 	.word	0x08003ed3
 8003df8:	682b      	ldr	r3, [r5, #0]
 8003dfa:	1d1a      	adds	r2, r3, #4
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	602a      	str	r2, [r5, #0]
 8003e00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e09f      	b.n	8003f4c <_printf_i+0x1ec>
 8003e0c:	6820      	ldr	r0, [r4, #0]
 8003e0e:	682b      	ldr	r3, [r5, #0]
 8003e10:	0607      	lsls	r7, r0, #24
 8003e12:	f103 0104 	add.w	r1, r3, #4
 8003e16:	6029      	str	r1, [r5, #0]
 8003e18:	d501      	bpl.n	8003e1e <_printf_i+0xbe>
 8003e1a:	681e      	ldr	r6, [r3, #0]
 8003e1c:	e003      	b.n	8003e26 <_printf_i+0xc6>
 8003e1e:	0646      	lsls	r6, r0, #25
 8003e20:	d5fb      	bpl.n	8003e1a <_printf_i+0xba>
 8003e22:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003e26:	2e00      	cmp	r6, #0
 8003e28:	da03      	bge.n	8003e32 <_printf_i+0xd2>
 8003e2a:	232d      	movs	r3, #45	; 0x2d
 8003e2c:	4276      	negs	r6, r6
 8003e2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e32:	485a      	ldr	r0, [pc, #360]	; (8003f9c <_printf_i+0x23c>)
 8003e34:	230a      	movs	r3, #10
 8003e36:	e012      	b.n	8003e5e <_printf_i+0xfe>
 8003e38:	682b      	ldr	r3, [r5, #0]
 8003e3a:	6820      	ldr	r0, [r4, #0]
 8003e3c:	1d19      	adds	r1, r3, #4
 8003e3e:	6029      	str	r1, [r5, #0]
 8003e40:	0605      	lsls	r5, r0, #24
 8003e42:	d501      	bpl.n	8003e48 <_printf_i+0xe8>
 8003e44:	681e      	ldr	r6, [r3, #0]
 8003e46:	e002      	b.n	8003e4e <_printf_i+0xee>
 8003e48:	0641      	lsls	r1, r0, #25
 8003e4a:	d5fb      	bpl.n	8003e44 <_printf_i+0xe4>
 8003e4c:	881e      	ldrh	r6, [r3, #0]
 8003e4e:	4853      	ldr	r0, [pc, #332]	; (8003f9c <_printf_i+0x23c>)
 8003e50:	2f6f      	cmp	r7, #111	; 0x6f
 8003e52:	bf0c      	ite	eq
 8003e54:	2308      	moveq	r3, #8
 8003e56:	230a      	movne	r3, #10
 8003e58:	2100      	movs	r1, #0
 8003e5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e5e:	6865      	ldr	r5, [r4, #4]
 8003e60:	60a5      	str	r5, [r4, #8]
 8003e62:	2d00      	cmp	r5, #0
 8003e64:	bfa2      	ittt	ge
 8003e66:	6821      	ldrge	r1, [r4, #0]
 8003e68:	f021 0104 	bicge.w	r1, r1, #4
 8003e6c:	6021      	strge	r1, [r4, #0]
 8003e6e:	b90e      	cbnz	r6, 8003e74 <_printf_i+0x114>
 8003e70:	2d00      	cmp	r5, #0
 8003e72:	d04b      	beq.n	8003f0c <_printf_i+0x1ac>
 8003e74:	4615      	mov	r5, r2
 8003e76:	fbb6 f1f3 	udiv	r1, r6, r3
 8003e7a:	fb03 6711 	mls	r7, r3, r1, r6
 8003e7e:	5dc7      	ldrb	r7, [r0, r7]
 8003e80:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003e84:	4637      	mov	r7, r6
 8003e86:	42bb      	cmp	r3, r7
 8003e88:	460e      	mov	r6, r1
 8003e8a:	d9f4      	bls.n	8003e76 <_printf_i+0x116>
 8003e8c:	2b08      	cmp	r3, #8
 8003e8e:	d10b      	bne.n	8003ea8 <_printf_i+0x148>
 8003e90:	6823      	ldr	r3, [r4, #0]
 8003e92:	07de      	lsls	r6, r3, #31
 8003e94:	d508      	bpl.n	8003ea8 <_printf_i+0x148>
 8003e96:	6923      	ldr	r3, [r4, #16]
 8003e98:	6861      	ldr	r1, [r4, #4]
 8003e9a:	4299      	cmp	r1, r3
 8003e9c:	bfde      	ittt	le
 8003e9e:	2330      	movle	r3, #48	; 0x30
 8003ea0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003ea4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003ea8:	1b52      	subs	r2, r2, r5
 8003eaa:	6122      	str	r2, [r4, #16]
 8003eac:	f8cd a000 	str.w	sl, [sp]
 8003eb0:	464b      	mov	r3, r9
 8003eb2:	aa03      	add	r2, sp, #12
 8003eb4:	4621      	mov	r1, r4
 8003eb6:	4640      	mov	r0, r8
 8003eb8:	f7ff fee4 	bl	8003c84 <_printf_common>
 8003ebc:	3001      	adds	r0, #1
 8003ebe:	d14a      	bne.n	8003f56 <_printf_i+0x1f6>
 8003ec0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ec4:	b004      	add	sp, #16
 8003ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003eca:	6823      	ldr	r3, [r4, #0]
 8003ecc:	f043 0320 	orr.w	r3, r3, #32
 8003ed0:	6023      	str	r3, [r4, #0]
 8003ed2:	4833      	ldr	r0, [pc, #204]	; (8003fa0 <_printf_i+0x240>)
 8003ed4:	2778      	movs	r7, #120	; 0x78
 8003ed6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003eda:	6823      	ldr	r3, [r4, #0]
 8003edc:	6829      	ldr	r1, [r5, #0]
 8003ede:	061f      	lsls	r7, r3, #24
 8003ee0:	f851 6b04 	ldr.w	r6, [r1], #4
 8003ee4:	d402      	bmi.n	8003eec <_printf_i+0x18c>
 8003ee6:	065f      	lsls	r7, r3, #25
 8003ee8:	bf48      	it	mi
 8003eea:	b2b6      	uxthmi	r6, r6
 8003eec:	07df      	lsls	r7, r3, #31
 8003eee:	bf48      	it	mi
 8003ef0:	f043 0320 	orrmi.w	r3, r3, #32
 8003ef4:	6029      	str	r1, [r5, #0]
 8003ef6:	bf48      	it	mi
 8003ef8:	6023      	strmi	r3, [r4, #0]
 8003efa:	b91e      	cbnz	r6, 8003f04 <_printf_i+0x1a4>
 8003efc:	6823      	ldr	r3, [r4, #0]
 8003efe:	f023 0320 	bic.w	r3, r3, #32
 8003f02:	6023      	str	r3, [r4, #0]
 8003f04:	2310      	movs	r3, #16
 8003f06:	e7a7      	b.n	8003e58 <_printf_i+0xf8>
 8003f08:	4824      	ldr	r0, [pc, #144]	; (8003f9c <_printf_i+0x23c>)
 8003f0a:	e7e4      	b.n	8003ed6 <_printf_i+0x176>
 8003f0c:	4615      	mov	r5, r2
 8003f0e:	e7bd      	b.n	8003e8c <_printf_i+0x12c>
 8003f10:	682b      	ldr	r3, [r5, #0]
 8003f12:	6826      	ldr	r6, [r4, #0]
 8003f14:	6961      	ldr	r1, [r4, #20]
 8003f16:	1d18      	adds	r0, r3, #4
 8003f18:	6028      	str	r0, [r5, #0]
 8003f1a:	0635      	lsls	r5, r6, #24
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	d501      	bpl.n	8003f24 <_printf_i+0x1c4>
 8003f20:	6019      	str	r1, [r3, #0]
 8003f22:	e002      	b.n	8003f2a <_printf_i+0x1ca>
 8003f24:	0670      	lsls	r0, r6, #25
 8003f26:	d5fb      	bpl.n	8003f20 <_printf_i+0x1c0>
 8003f28:	8019      	strh	r1, [r3, #0]
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	6123      	str	r3, [r4, #16]
 8003f2e:	4615      	mov	r5, r2
 8003f30:	e7bc      	b.n	8003eac <_printf_i+0x14c>
 8003f32:	682b      	ldr	r3, [r5, #0]
 8003f34:	1d1a      	adds	r2, r3, #4
 8003f36:	602a      	str	r2, [r5, #0]
 8003f38:	681d      	ldr	r5, [r3, #0]
 8003f3a:	6862      	ldr	r2, [r4, #4]
 8003f3c:	2100      	movs	r1, #0
 8003f3e:	4628      	mov	r0, r5
 8003f40:	f7fc f94e 	bl	80001e0 <memchr>
 8003f44:	b108      	cbz	r0, 8003f4a <_printf_i+0x1ea>
 8003f46:	1b40      	subs	r0, r0, r5
 8003f48:	6060      	str	r0, [r4, #4]
 8003f4a:	6863      	ldr	r3, [r4, #4]
 8003f4c:	6123      	str	r3, [r4, #16]
 8003f4e:	2300      	movs	r3, #0
 8003f50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f54:	e7aa      	b.n	8003eac <_printf_i+0x14c>
 8003f56:	6923      	ldr	r3, [r4, #16]
 8003f58:	462a      	mov	r2, r5
 8003f5a:	4649      	mov	r1, r9
 8003f5c:	4640      	mov	r0, r8
 8003f5e:	47d0      	blx	sl
 8003f60:	3001      	adds	r0, #1
 8003f62:	d0ad      	beq.n	8003ec0 <_printf_i+0x160>
 8003f64:	6823      	ldr	r3, [r4, #0]
 8003f66:	079b      	lsls	r3, r3, #30
 8003f68:	d413      	bmi.n	8003f92 <_printf_i+0x232>
 8003f6a:	68e0      	ldr	r0, [r4, #12]
 8003f6c:	9b03      	ldr	r3, [sp, #12]
 8003f6e:	4298      	cmp	r0, r3
 8003f70:	bfb8      	it	lt
 8003f72:	4618      	movlt	r0, r3
 8003f74:	e7a6      	b.n	8003ec4 <_printf_i+0x164>
 8003f76:	2301      	movs	r3, #1
 8003f78:	4632      	mov	r2, r6
 8003f7a:	4649      	mov	r1, r9
 8003f7c:	4640      	mov	r0, r8
 8003f7e:	47d0      	blx	sl
 8003f80:	3001      	adds	r0, #1
 8003f82:	d09d      	beq.n	8003ec0 <_printf_i+0x160>
 8003f84:	3501      	adds	r5, #1
 8003f86:	68e3      	ldr	r3, [r4, #12]
 8003f88:	9903      	ldr	r1, [sp, #12]
 8003f8a:	1a5b      	subs	r3, r3, r1
 8003f8c:	42ab      	cmp	r3, r5
 8003f8e:	dcf2      	bgt.n	8003f76 <_printf_i+0x216>
 8003f90:	e7eb      	b.n	8003f6a <_printf_i+0x20a>
 8003f92:	2500      	movs	r5, #0
 8003f94:	f104 0619 	add.w	r6, r4, #25
 8003f98:	e7f5      	b.n	8003f86 <_printf_i+0x226>
 8003f9a:	bf00      	nop
 8003f9c:	0800418b 	.word	0x0800418b
 8003fa0:	0800419c 	.word	0x0800419c

08003fa4 <memmove>:
 8003fa4:	4288      	cmp	r0, r1
 8003fa6:	b510      	push	{r4, lr}
 8003fa8:	eb01 0402 	add.w	r4, r1, r2
 8003fac:	d902      	bls.n	8003fb4 <memmove+0x10>
 8003fae:	4284      	cmp	r4, r0
 8003fb0:	4623      	mov	r3, r4
 8003fb2:	d807      	bhi.n	8003fc4 <memmove+0x20>
 8003fb4:	1e43      	subs	r3, r0, #1
 8003fb6:	42a1      	cmp	r1, r4
 8003fb8:	d008      	beq.n	8003fcc <memmove+0x28>
 8003fba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003fbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003fc2:	e7f8      	b.n	8003fb6 <memmove+0x12>
 8003fc4:	4402      	add	r2, r0
 8003fc6:	4601      	mov	r1, r0
 8003fc8:	428a      	cmp	r2, r1
 8003fca:	d100      	bne.n	8003fce <memmove+0x2a>
 8003fcc:	bd10      	pop	{r4, pc}
 8003fce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003fd2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003fd6:	e7f7      	b.n	8003fc8 <memmove+0x24>

08003fd8 <_sbrk_r>:
 8003fd8:	b538      	push	{r3, r4, r5, lr}
 8003fda:	4d06      	ldr	r5, [pc, #24]	; (8003ff4 <_sbrk_r+0x1c>)
 8003fdc:	2300      	movs	r3, #0
 8003fde:	4604      	mov	r4, r0
 8003fe0:	4608      	mov	r0, r1
 8003fe2:	602b      	str	r3, [r5, #0]
 8003fe4:	f7fc fc8a 	bl	80008fc <_sbrk>
 8003fe8:	1c43      	adds	r3, r0, #1
 8003fea:	d102      	bne.n	8003ff2 <_sbrk_r+0x1a>
 8003fec:	682b      	ldr	r3, [r5, #0]
 8003fee:	b103      	cbz	r3, 8003ff2 <_sbrk_r+0x1a>
 8003ff0:	6023      	str	r3, [r4, #0]
 8003ff2:	bd38      	pop	{r3, r4, r5, pc}
 8003ff4:	20000494 	.word	0x20000494

08003ff8 <memcpy>:
 8003ff8:	440a      	add	r2, r1
 8003ffa:	4291      	cmp	r1, r2
 8003ffc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004000:	d100      	bne.n	8004004 <memcpy+0xc>
 8004002:	4770      	bx	lr
 8004004:	b510      	push	{r4, lr}
 8004006:	f811 4b01 	ldrb.w	r4, [r1], #1
 800400a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800400e:	4291      	cmp	r1, r2
 8004010:	d1f9      	bne.n	8004006 <memcpy+0xe>
 8004012:	bd10      	pop	{r4, pc}

08004014 <_realloc_r>:
 8004014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004018:	4680      	mov	r8, r0
 800401a:	4614      	mov	r4, r2
 800401c:	460e      	mov	r6, r1
 800401e:	b921      	cbnz	r1, 800402a <_realloc_r+0x16>
 8004020:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004024:	4611      	mov	r1, r2
 8004026:	f7ff bc49 	b.w	80038bc <_malloc_r>
 800402a:	b92a      	cbnz	r2, 8004038 <_realloc_r+0x24>
 800402c:	f7ff fbda 	bl	80037e4 <_free_r>
 8004030:	4625      	mov	r5, r4
 8004032:	4628      	mov	r0, r5
 8004034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004038:	f000 f81b 	bl	8004072 <_malloc_usable_size_r>
 800403c:	4284      	cmp	r4, r0
 800403e:	4607      	mov	r7, r0
 8004040:	d802      	bhi.n	8004048 <_realloc_r+0x34>
 8004042:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004046:	d812      	bhi.n	800406e <_realloc_r+0x5a>
 8004048:	4621      	mov	r1, r4
 800404a:	4640      	mov	r0, r8
 800404c:	f7ff fc36 	bl	80038bc <_malloc_r>
 8004050:	4605      	mov	r5, r0
 8004052:	2800      	cmp	r0, #0
 8004054:	d0ed      	beq.n	8004032 <_realloc_r+0x1e>
 8004056:	42bc      	cmp	r4, r7
 8004058:	4622      	mov	r2, r4
 800405a:	4631      	mov	r1, r6
 800405c:	bf28      	it	cs
 800405e:	463a      	movcs	r2, r7
 8004060:	f7ff ffca 	bl	8003ff8 <memcpy>
 8004064:	4631      	mov	r1, r6
 8004066:	4640      	mov	r0, r8
 8004068:	f7ff fbbc 	bl	80037e4 <_free_r>
 800406c:	e7e1      	b.n	8004032 <_realloc_r+0x1e>
 800406e:	4635      	mov	r5, r6
 8004070:	e7df      	b.n	8004032 <_realloc_r+0x1e>

08004072 <_malloc_usable_size_r>:
 8004072:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004076:	1f18      	subs	r0, r3, #4
 8004078:	2b00      	cmp	r3, #0
 800407a:	bfbc      	itt	lt
 800407c:	580b      	ldrlt	r3, [r1, r0]
 800407e:	18c0      	addlt	r0, r0, r3
 8004080:	4770      	bx	lr
	...

08004084 <_init>:
 8004084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004086:	bf00      	nop
 8004088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800408a:	bc08      	pop	{r3}
 800408c:	469e      	mov	lr, r3
 800408e:	4770      	bx	lr

08004090 <_fini>:
 8004090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004092:	bf00      	nop
 8004094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004096:	bc08      	pop	{r3}
 8004098:	469e      	mov	lr, r3
 800409a:	4770      	bx	lr
